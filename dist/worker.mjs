import*as t from"@angular/compiler-cli";import e from"typescript";import r from"buffer";import o from"assert";import i from"util";import n from"path";import s from"events";import a from"stream";import*as p from"fs";import c from"fs";import u from"path/posix";import*as h from"node:fs";class l{name;map=new Map;constructor(t){this.name=t}set(t,e){this.map.set(t,e)}get(t,e=!0){const r=this.map.get(t);return e&&r&&(this.map.delete(t),this.map.set(t,r)),r}delete(t){this.map.delete(t)}evict(t=2){const e=this.map.size;let r=Math.ceil(e/t);if(0===r)return 0;for(const t of this.map.keys()){if(0===r)break;this.map.delete(t),r--}return e-this.map.size}keys(){return this.map.keys()}}class f{fileCache=new l("file");lastDigests=new Map;cannotEvict=!1;maxMemoryUsage=1073741824;updateCache(t){this.lastDigests=new Map;for(const[e,r]of t.entries()){this.lastDigests.set(e,r);const t=this.fileCache.get(e,!1);t&&!d(t.digest,r)&&(console.error("evicting",e),this.fileCache.delete(e))}this.cannotEvict=!1}getLastDigest(t){return this.lastDigests.get(t)}getCache(t){const e=this.fileCache.get(t,!0);if(e)return e.value}putCache(t,e){this.maybeFreeMemory(),this.fileCache.set(t,e)}inCache(t){return!!this.getCache(t)}shouldFreeMemory=t=>t>this.maxMemoryUsage;maybeFreeMemory(){if(this.cannotEvict)return 0;const t=process.memoryUsage().heapUsed;if(!this.shouldFreeMemory(t))return 0;const e=this.fileCache.evict();return 0===e&&(this.cannotEvict=!0),e}}function d(t,e){if(t.length!==e.length)return!1;for(let r=0;r<t.length;r++)if(t[r]!==e[r])return!1;return!0}var y="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function g(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}function m(t){if(t.__esModule)return t;var e=t.default;if("function"==typeof e){var r=function t(){return this instanceof t?Reflect.construct(e,arguments,this.constructor):e.apply(this,arguments)};r.prototype=e.prototype}else r={};return Object.defineProperty(r,"__esModule",{value:!0}),Object.keys(t).forEach((function(e){var o=Object.getOwnPropertyDescriptor(t,e);Object.defineProperty(r,e,o.get?o:{enumerable:!0,get:function(){return t[e]}})})),r}var b,v,w={exports:{}},_={},S={};function E(){return b||(b=1,Object.defineProperty(S,"__esModule",{value:!0}),S.constants=void 0,S.constants={O_RDONLY:0,O_WRONLY:1,O_RDWR:2,S_IFMT:61440,S_IFREG:32768,S_IFDIR:16384,S_IFCHR:8192,S_IFBLK:24576,S_IFIFO:4096,S_IFLNK:40960,S_IFSOCK:49152,O_CREAT:64,O_EXCL:128,O_NOCTTY:256,O_TRUNC:512,O_APPEND:1024,O_DIRECTORY:65536,O_NOATIME:262144,O_NOFOLLOW:131072,O_SYNC:1052672,O_SYMLINK:2097152,O_DIRECT:16384,O_NONBLOCK:2048,S_IRWXU:448,S_IRUSR:256,S_IWUSR:128,S_IXUSR:64,S_IRWXG:56,S_IRGRP:32,S_IWGRP:16,S_IXGRP:8,S_IRWXO:7,S_IROTH:4,S_IWOTH:2,S_IXOTH:1,F_OK:0,R_OK:4,W_OK:2,X_OK:1,UV_FS_SYMLINK_DIR:1,UV_FS_SYMLINK_JUNCTION:2,UV_FS_COPYFILE_EXCL:1,UV_FS_COPYFILE_FICLONE:2,UV_FS_COPYFILE_FICLONE_FORCE:4,COPYFILE_EXCL:1,COPYFILE_FICLONE:2,COPYFILE_FICLONE_FORCE:4}),S}function O(){if(v)return _;v=1,Object.defineProperty(_,"__esModule",{value:!0}),_.Stats=void 0;const t=E(),{S_IFMT:e,S_IFDIR:r,S_IFREG:o,S_IFBLK:i,S_IFCHR:n,S_IFLNK:s,S_IFIFO:a,S_IFSOCK:p}=t.constants;let c=class t{static build(e,r=!1){const o=new t,{uid:i,gid:n,atime:s,mtime:a,ctime:p}=e,c=r?t=>BigInt(t):t=>t;o.uid=c(i),o.gid=c(n),o.rdev=c(0),o.blksize=c(4096),o.ino=c(e.ino),o.size=c(e.getSize()),o.blocks=c(1),o.atime=s,o.mtime=a,o.ctime=p,o.birthtime=p,o.atimeMs=c(s.getTime()),o.mtimeMs=c(a.getTime());const u=c(p.getTime());if(o.ctimeMs=u,o.birthtimeMs=u,r){o.atimeNs=BigInt(s.getTime())*BigInt(1e6),o.mtimeNs=BigInt(a.getTime())*BigInt(1e6);const t=BigInt(p.getTime())*BigInt(1e6);o.ctimeNs=t,o.birthtimeNs=t}return o.dev=c(0),o.mode=c(e.mode),o.nlink=c(e.nlink),o}_checkModeProperty(t){return(Number(this.mode)&e)===t}isDirectory(){return this._checkModeProperty(r)}isFile(){return this._checkModeProperty(o)}isBlockDevice(){return this._checkModeProperty(i)}isCharacterDevice(){return this._checkModeProperty(n)}isSymbolicLink(){return this._checkModeProperty(s)}isFIFO(){return this._checkModeProperty(a)}isSocket(){return this._checkModeProperty(p)}};return _.Stats=c,_.default=c,_}var F,R={},T={},k={};function A(){return F||(F=1,function(t){Object.defineProperty(t,"__esModule",{value:!0}),t.bufferFrom=t.bufferAllocUnsafe=t.Buffer=void 0;const e=r;function o(t,...r){return new e.Buffer(t,...r)}Object.defineProperty(t,"Buffer",{enumerable:!0,get:function(){return e.Buffer}});const i=e.Buffer.allocUnsafe||o;t.bufferAllocUnsafe=i;const n=e.Buffer.from||o;t.bufferFrom=n}(k)),k}var P,N,I,C={};function B(){return P||(P=1,function(t){Object.defineProperty(t,"__esModule",{value:!0}),t.AssertionError=t.RangeError=t.TypeError=t.Error=void 0,t.message=u,t.E=h;const e=o,r=i,n="undefined"==typeof Symbol?"_kCode":Symbol("code"),s={};function a(t){return class extends t{constructor(t,...e){super(u(t,e)),this.code=t,this[n]=t,this.name=`${super.name} [${this[n]}]`}}}const p="undefined"!=typeof globalThis?globalThis:y;class c extends p.Error{constructor(e){if("object"!=typeof e||null===e)throw new t.TypeError("ERR_INVALID_ARG_TYPE","options","object");e.message?super(e.message):super(`${r.inspect(e.actual).slice(0,128)} ${e.operator} ${r.inspect(e.expected).slice(0,128)}`),this.generatedMessage=!e.message,this.name="AssertionError [ERR_ASSERTION]",this.code="ERR_ASSERTION",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,t.Error.captureStackTrace(this,e.stackStartFunction)}}function u(t,o){e.strictEqual(typeof t,"string");const i=s[t];let n;if(e(i,`An invalid error message key was used: ${t}.`),"function"==typeof i)n=i;else{if(n=r.format,void 0===o||0===o.length)return i;o.unshift(i)}return String(n.apply(null,o))}function h(t,e){s[t]="function"==typeof e?e:String(e)}function l(t,r){if(e(t,"expected is required"),e("string"==typeof r,"thing is required"),Array.isArray(t)){const o=t.length;return e(o>0,"At least one expected value needs to be specified"),t=t.map((t=>String(t))),o>2?`one of ${r} ${t.slice(0,o-1).join(", ")}, or `+t[o-1]:2===o?`one of ${r} ${t[0]} or ${t[1]}`:`of ${r} ${t[0]}`}return`of ${r} ${String(t)}`}t.AssertionError=c,t.Error=a(p.Error),t.TypeError=a(p.TypeError),t.RangeError=a(p.RangeError),h("ERR_ARG_NOT_ITERABLE","%s must be iterable"),h("ERR_ASSERTION","%s"),h("ERR_BUFFER_OUT_OF_BOUNDS",(function(t,e){return e?"Attempt to write outside buffer bounds":`"${t}" is outside of buffer bounds`})),h("ERR_CHILD_CLOSED_BEFORE_REPLY","Child closed before reply received"),h("ERR_CONSOLE_WRITABLE_STREAM","Console expects a writable stream instance for %s"),h("ERR_CPU_USAGE","Unable to obtain cpu usage %s"),h("ERR_DNS_SET_SERVERS_FAILED",((t,e)=>`c-ares failed to set servers: "${t}" [${e}]`)),h("ERR_FALSY_VALUE_REJECTION","Promise was rejected with falsy value"),h("ERR_ENCODING_NOT_SUPPORTED",(t=>`The "${t}" encoding is not supported`)),h("ERR_ENCODING_INVALID_ENCODED_DATA",(t=>`The encoded data was not valid for encoding ${t}`)),h("ERR_HTTP_HEADERS_SENT","Cannot render headers after they are sent to the client"),h("ERR_HTTP_INVALID_STATUS_CODE","Invalid status code: %s"),h("ERR_HTTP_TRAILER_INVALID","Trailers are invalid with this transfer encoding"),h("ERR_INDEX_OUT_OF_RANGE","Index out of range"),h("ERR_INVALID_ARG_TYPE",(function(t,r,o){let i,n;e(t,"name is required"),r.includes("not ")?(i="must not be",r=r.split("not ")[1]):i="must be";if(Array.isArray(t)){n=`The ${t.map((t=>`"${t}"`)).join(", ")} arguments ${i} ${l(r,"type")}`}else if(t.includes(" argument"))n=`The ${t} ${i} ${l(r,"type")}`;else{const e=t.includes(".")?"property":"argument";n=`The "${t}" ${e} ${i} ${l(r,"type")}`}arguments.length>=3&&(n+=". Received type "+(null!==o?typeof o:"null"));return n})),h("ERR_INVALID_ARRAY_LENGTH",((t,r,o)=>(e.strictEqual(typeof o,"number"),`The array "${t}" (length ${o}) must be of length ${r}.`))),h("ERR_INVALID_BUFFER_SIZE","Buffer size must be a multiple of %s"),h("ERR_INVALID_CALLBACK","Callback must be a function"),h("ERR_INVALID_CHAR","Invalid character in %s"),h("ERR_INVALID_CURSOR_POS","Cannot set cursor row without setting its column"),h("ERR_INVALID_FD",'"fd" must be a positive integer: %s'),h("ERR_INVALID_FILE_URL_HOST",'File URL host must be "localhost" or empty on %s'),h("ERR_INVALID_FILE_URL_PATH","File URL path %s"),h("ERR_INVALID_HANDLE_TYPE","This handle type cannot be sent"),h("ERR_INVALID_IP_ADDRESS","Invalid IP address: %s"),h("ERR_INVALID_OPT_VALUE",((t,e)=>`The value "${String(e)}" is invalid for option "${t}"`)),h("ERR_INVALID_OPT_VALUE_ENCODING",(t=>`The value "${String(t)}" is invalid for option "encoding"`)),h("ERR_INVALID_REPL_EVAL_CONFIG",'Cannot specify both "breakEvalOnSigint" and "eval" for REPL'),h("ERR_INVALID_SYNC_FORK_INPUT","Asynchronous forks do not support Buffer, Uint8Array or string input: %s"),h("ERR_INVALID_THIS",'Value of "this" must be of type %s'),h("ERR_INVALID_TUPLE","%s must be an iterable %s tuple"),h("ERR_INVALID_URL","Invalid URL: %s"),h("ERR_INVALID_URL_SCHEME",(t=>`The URL must be ${l(t,"scheme")}`)),h("ERR_IPC_CHANNEL_CLOSED","Channel closed"),h("ERR_IPC_DISCONNECTED","IPC channel is already disconnected"),h("ERR_IPC_ONE_PIPE","Child process can have only one IPC pipe"),h("ERR_IPC_SYNC_FORK","IPC cannot be used with synchronous forks"),h("ERR_MISSING_ARGS",(function(...t){e(t.length>0,"At least one arg needs to be specified");let r="The ";const o=t.length;switch(t=t.map((t=>`"${t}"`)),o){case 1:r+=`${t[0]} argument`;break;case 2:r+=`${t[0]} and ${t[1]} arguments`;break;default:r+=t.slice(0,o-1).join(", "),r+=`, and ${t[o-1]} arguments`}return`${r} must be specified`})),h("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),h("ERR_NAPI_CONS_FUNCTION","Constructor must be a function"),h("ERR_NAPI_CONS_PROTOTYPE_OBJECT","Constructor.prototype must be an object"),h("ERR_NO_CRYPTO","Node.js is not compiled with OpenSSL crypto support"),h("ERR_NO_LONGER_SUPPORTED","%s is no longer supported"),h("ERR_PARSE_HISTORY_DATA","Could not parse history data in %s"),h("ERR_SOCKET_ALREADY_BOUND","Socket is already bound"),h("ERR_SOCKET_BAD_PORT","Port should be > 0 and < 65536"),h("ERR_SOCKET_BAD_TYPE","Bad socket type specified. Valid types are: udp4, udp6"),h("ERR_SOCKET_CANNOT_SEND","Unable to send data"),h("ERR_SOCKET_CLOSED","Socket is closed"),h("ERR_SOCKET_DGRAM_NOT_RUNNING","Not running"),h("ERR_STDERR_CLOSE","process.stderr cannot be closed"),h("ERR_STDOUT_CLOSE","process.stdout cannot be closed"),h("ERR_STREAM_WRAP","Stream has StringDecoder set or is in objectMode"),h("ERR_TLS_CERT_ALTNAME_INVALID","Hostname/IP does not match certificate's altnames: %s"),h("ERR_TLS_DH_PARAM_SIZE",(t=>`DH parameter size ${t} is less than 2048`)),h("ERR_TLS_HANDSHAKE_TIMEOUT","TLS handshake timeout"),h("ERR_TLS_RENEGOTIATION_FAILED","Failed to renegotiate"),h("ERR_TLS_REQUIRED_SERVER_NAME",'"servername" is required parameter for Server.addContext'),h("ERR_TLS_SESSION_ATTACK","TSL session renegotiation attack detected"),h("ERR_TRANSFORM_ALREADY_TRANSFORMING","Calling transform done when still transforming"),h("ERR_TRANSFORM_WITH_LENGTH_0","Calling transform done when writableState.length != 0"),h("ERR_UNKNOWN_ENCODING","Unknown encoding: %s"),h("ERR_UNKNOWN_SIGNAL","Unknown signal: %s"),h("ERR_UNKNOWN_STDIN_TYPE","Unknown stdin file type"),h("ERR_UNKNOWN_STREAM_TYPE","Unknown stream file type"),h("ERR_V8BREAKITERATOR","Full ICU data not installed. See https://github.com/nodejs/node/wiki/Intl")}(C)),C}function x(){return N||(N=1,function(t){Object.defineProperty(t,"__esModule",{value:!0}),t.ENCODING_UTF8=void 0,t.assertEncoding=function(t){if(t&&!e.Buffer.isEncoding(t))throw new r.TypeError("ERR_INVALID_OPT_VALUE_ENCODING",t)},t.strToEncoding=function(r,o){return o&&o!==t.ENCODING_UTF8?"buffer"===o?new e.Buffer(r):new e.Buffer(r).toString(o):r};const e=A(),r=B();t.ENCODING_UTF8="utf8"}(T)),T}function j(){if(I)return R;I=1,Object.defineProperty(R,"__esModule",{value:!0}),R.Dirent=void 0;const t=E(),e=x(),{S_IFMT:r,S_IFDIR:o,S_IFREG:i,S_IFBLK:n,S_IFCHR:s,S_IFLNK:a,S_IFIFO:p,S_IFSOCK:c}=t.constants;let u=class t{constructor(){this.name="",this.path="",this.parentPath="",this.mode=0}static build(r,o){const i=new t,{mode:n}=r.getNode();return i.name=(0,e.strToEncoding)(r.getName(),o),i.mode=n,i.path=r.getParentPath(),i.parentPath=i.path,i}_checkModeProperty(t){return(this.mode&r)===t}isDirectory(){return this._checkModeProperty(o)}isFile(){return this._checkModeProperty(i)}isBlockDevice(){return this._checkModeProperty(n)}isCharacterDevice(){return this._checkModeProperty(s)}isSymbolicLink(){return this._checkModeProperty(a)}isFIFO(){return this._checkModeProperty(p)}isSocket(){return this._checkModeProperty(c)}};return R.Dirent=u,R.default=u,R}var D,L,M={},U={},W={};function $(){if(D)return W;D=1,Object.defineProperty(W,"__esModule",{value:!0}),W.createProcess=e;const t=()=>{if("undefined"!=typeof process)return process;try{return require("process")}catch(t){return}};function e(){const e=t()||{};return e.cwd||(e.cwd=()=>"/"),e.emitWarning||(e.emitWarning=(t,e)=>{console.warn(`${e}${e?": ":""}${t}`)}),e.env||(e.env={}),e}return W.default=e(),W}var V,z={};var G,H={};function q(){return G||(G=1,Object.defineProperty(H,"__esModule",{value:!0}),H.default="function"==typeof queueMicrotask?queueMicrotask:t=>Promise.resolve().then((()=>t())).catch((()=>{}))),H}var K,Y={};var J,X,Z,Q={},tt={},et={};function rt(){if(J)return et;J=1,Object.defineProperty(et,"__esModule",{value:!0}),et.FLAGS=et.ERRSTR=void 0;const t=E();et.ERRSTR={PATH_STR:"path must be a string or Buffer",FD:"fd must be a file descriptor",MODE_INT:"mode must be an int",CB:"callback must be a function",UID:"uid must be an unsigned int",GID:"gid must be an unsigned int",LEN:"len must be an integer",ATIME:"atime must be an integer",MTIME:"mtime must be an integer",PREFIX:"filename prefix is required",BUFFER:"buffer must be an instance of Buffer or StaticBuffer",OFFSET:"offset must be an integer",LENGTH:"length must be an integer",POSITION:"position must be an integer"};const{O_RDONLY:e,O_WRONLY:r,O_RDWR:o,O_CREAT:i,O_EXCL:n,O_TRUNC:s,O_APPEND:a,O_SYNC:p}=t.constants;var c;return function(t){t[t.r=e]="r",t[t["r+"]=o]="r+",t[t.rs=e|p]="rs",t[t.sr=t.rs]="sr",t[t["rs+"]=o|p]="rs+",t[t["sr+"]=t["rs+"]]="sr+",t[t.w=r|i|s]="w",t[t.wx=r|i|s|n]="wx",t[t.xw=t.wx]="xw",t[t["w+"]=o|i|s]="w+",t[t["wx+"]=o|i|s|n]="wx+",t[t["xw+"]=t["wx+"]]="xw+",t[t.a=r|a|i]="a",t[t.ax=r|a|i|n]="ax",t[t.xa=t.ax]="xa",t[t["a+"]=o|a|i]="a+",t[t["ax+"]=o|a|i|n]="ax+",t[t["xa+"]=t["ax+"]]="xa+"}(c||(et.FLAGS=c={})),et}function ot(){return X||(X=1,function(t){Object.defineProperty(t,"__esModule",{value:!0}),t.unixify=t.getWriteSyncArgs=t.getWriteArgs=t.bufToUint8=t.isWin=void 0,t.promisify=function(t,e,r=t=>t){return(...o)=>new Promise(((i,n)=>{t[e].bind(t)(...o,((t,e)=>t?n(t):i(r(e))))}))},t.validateCallback=a,t.modeToNumber=p,t.nullCheck=c,t.pathToFilename=function(t){if("string"!=typeof t&&!o.Buffer.isBuffer(t)){try{if(!(t instanceof require("url").URL))throw new TypeError(e.ERRSTR.PATH_STR)}catch(t){throw new TypeError(e.ERRSTR.PATH_STR)}t=function(t){if(""!==t.hostname)throw new r.TypeError("ERR_INVALID_FILE_URL_HOST",process.platform);const e=t.pathname;for(let t=0;t<e.length;t++)if("%"===e[t]){const o=32|e.codePointAt(t+2);if("2"===e[t+1]&&102===o)throw new r.TypeError("ERR_INVALID_FILE_URL_PATH","must not include encoded / characters")}return decodeURIComponent(e)}(t)}const i=String(t);return c(i),i},t.createError=function(t,e="",r="",o="",i=Error){const n=new i(function(t,e="",r="",o=""){let i="";r&&(i=` '${r}'`);o&&(i+=` -> '${o}'`);switch(t){case u:return`ENOENT: no such file or directory, ${e}${i}`;case h:return`EBADF: bad file descriptor, ${e}${i}`;case l:return`EINVAL: invalid argument, ${e}${i}`;case f:return`EPERM: operation not permitted, ${e}${i}`;case d:return`EPROTO: protocol error, ${e}${i}`;case y:return`EEXIST: file already exists, ${e}${i}`;case g:return`ENOTDIR: not a directory, ${e}${i}`;case v:return`EISDIR: illegal operation on a directory, ${e}${i}`;case b:return`EACCES: permission denied, ${e}${i}`;case w:return`ENOTEMPTY: directory not empty, ${e}${i}`;case m:return`EMFILE: too many open files, ${e}${i}`;case _:return`ENOSYS: function not implemented, ${e}${i}`;case S:return`[ERR_FS_EISDIR]: Path is a directory: ${e} returned EISDIR (is a directory) ${r}`;case E:return`[ERR_OUT_OF_RANGE]: value out of range, ${e}${i}`;default:return`${t}: error occurred, ${e}${i}`}}(t,e,r,o));n.code=t,r&&(n.path=r);return n},t.genRndStr6=function t(){const e=(Math.random()+1).toString(36).substring(2,8);return 6===e.length?e:t()},t.flagsToNumber=function(t){if("number"==typeof t)return t;if("string"==typeof t){const r=e.FLAGS[t];if(void 0!==r)return r}throw new r.TypeError("ERR_INVALID_OPT_VALUE","flags",t)},t.isFd=O,t.validateFd=F,t.streamToBuffer=function(t){const e=[];return new Promise(((r,i)=>{t.on("data",(t=>e.push(t))),t.on("end",(()=>r(o.Buffer.concat(e)))),t.on("error",i)}))},t.dataToBuffer=R,t.bufferToEncoding=function(t,e){return e&&"buffer"!==e?t.toString(e):t},t.isReadableStream=function(t){return null!==t&&"object"==typeof t&&"function"==typeof t.pipe&&"function"==typeof t.on&&!0===t.readable};const e=rt(),r=B(),o=A(),i=x(),n=A(),s=q();function a(t){if("function"!=typeof t)throw TypeError(e.ERRSTR.CB);return t}function p(t,r){const o=function(t,e){return"number"==typeof t?t:"string"==typeof t?parseInt(t,8):e?p(e):void 0}(t,r);if("number"!=typeof o||isNaN(o))throw new TypeError(e.ERRSTR.MODE_INT);return o}function c(t,e){if(-1!==(""+t).indexOf("\0")){const t=new Error("Path must be a string without null bytes");if(t.code="ENOENT","function"!=typeof e)throw t;return(0,s.default)((()=>{e(t)})),!1}return!0}t.isWin="win32"===process.platform;const u="ENOENT",h="EBADF",l="EINVAL",f="EPERM",d="EPROTO",y="EEXIST",g="ENOTDIR",m="EMFILE",b="EACCES",v="EISDIR",w="ENOTEMPTY",_="ENOSYS",S="ERR_FS_EISDIR",E="ERR_OUT_OF_RANGE";function O(t){return t>>>0===t}function F(t){if(!O(t))throw TypeError(e.ERRSTR.FD)}function R(t,e=i.ENCODING_UTF8){return o.Buffer.isBuffer(t)?t:t instanceof Uint8Array?(0,n.bufferFrom)(t):(0,n.bufferFrom)(String(t),e)}t.bufToUint8=t=>new Uint8Array(t.buffer,t.byteOffset,t.byteLength);t.getWriteArgs=(t,e,r,o,i,n)=>{F(t);let s,p,c,u=0,h=null;const l=typeof e,f=typeof r,d=typeof o,y=typeof i;"string"!==l?"function"===f?c=r:"function"===d?(u=0|r,c=o):"function"===y?(u=0|r,s=o,c=i):(u=0|r,s=o,h=i,c=n):"function"===f?c=r:"function"===d?(h=r,c=o):"function"===y&&(h=r,p=o,c=i);const g=R(e,p);"string"!==l?void 0===s&&(s=g.length):(u=0,s=g.length);return[t,"string"===l,g,u,s,h,a(c)]};t.getWriteSyncArgs=(t,e,r,o,i)=>{let n,s,a,p;F(t);const c="string"!=typeof e;c?(s=0|(r||0),a=o,p=i):(p=r,n=o);const u=R(e,n);return c?void 0===a&&(a=u.length):(s=0,a=u.length),[t,u,s||0,a,p]};const T=(e,r)=>{let o=e[r];return r>0&&("/"===o||t.isWin&&"\\"===o)},k=(t,e)=>{if("string"!=typeof t)throw new TypeError("expected a string");return t=t.replace(/[\\\/]+/g,"/"),!1!==e&&(t=(t=>{let e=t.length-1;if(e<2)return t;for(;T(t,e);)e--;return t.substr(0,e+1)})(t)),t};t.unixify=(e,r=!0)=>t.isWin?(e=k(e,r)).replace(/^([a-zA-Z]+:|\.\/)/,""):e}(tt)),tt}var it,nt={};var st={},at={},pt=function(t,e){return pt=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},pt(t,e)};function ct(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}pt(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}var ut=function(){return ut=Object.assign||function(t){for(var e,r=1,o=arguments.length;r<o;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},ut.apply(this,arguments)};function ht(t,e){var r={};for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&e.indexOf(o)<0&&(r[o]=t[o]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(o=Object.getOwnPropertySymbols(t);i<o.length;i++)e.indexOf(o[i])<0&&Object.prototype.propertyIsEnumerable.call(t,o[i])&&(r[o[i]]=t[o[i]])}return r}function lt(t,e,r,o){var i,n=arguments.length,s=n<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(n<3?i(s):n>3?i(e,r,s):i(e,r))||s);return n>3&&s&&Object.defineProperty(e,r,s),s}function ft(t,e){return function(r,o){e(r,o,t)}}function dt(t,e,r,o,i,n){function s(t){if(void 0!==t&&"function"!=typeof t)throw new TypeError("Function expected");return t}for(var a,p=o.kind,c="getter"===p?"get":"setter"===p?"set":"value",u=!e&&t?o.static?t:t.prototype:null,h=e||(u?Object.getOwnPropertyDescriptor(u,o.name):{}),l=!1,f=r.length-1;f>=0;f--){var d={};for(var y in o)d[y]="access"===y?{}:o[y];for(var y in o.access)d.access[y]=o.access[y];d.addInitializer=function(t){if(l)throw new TypeError("Cannot add initializers after decoration has completed");n.push(s(t||null))};var g=(0,r[f])("accessor"===p?{get:h.get,set:h.set}:h[c],d);if("accessor"===p){if(void 0===g)continue;if(null===g||"object"!=typeof g)throw new TypeError("Object expected");(a=s(g.get))&&(h.get=a),(a=s(g.set))&&(h.set=a),(a=s(g.init))&&i.unshift(a)}else(a=s(g))&&("field"===p?i.unshift(a):h[c]=a)}u&&Object.defineProperty(u,o.name,h),l=!0}function yt(t,e,r){for(var o=arguments.length>2,i=0;i<e.length;i++)r=o?e[i].call(t,r):e[i].call(t);return o?r:void 0}function gt(t){return"symbol"==typeof t?t:"".concat(t)}function mt(t,e,r){return"symbol"==typeof e&&(e=e.description?"[".concat(e.description,"]"):""),Object.defineProperty(t,"name",{configurable:!0,value:r?"".concat(r," ",e):e})}function bt(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function vt(t,e,r,o){return new(r||(r=Promise))((function(i,n){function s(t){try{p(o.next(t))}catch(t){n(t)}}function a(t){try{p(o.throw(t))}catch(t){n(t)}}function p(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}p((o=o.apply(t,e||[])).next())}))}function wt(t,e){var r,o,i,n={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]},s=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return s.next=a(0),s.throw=a(1),s.return=a(2),"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(a){return function(p){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;s&&(s=0,a[0]&&(n=0)),n;)try{if(r=1,o&&(i=2&a[0]?o.return:a[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,a[1])).done)return i;switch(o=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return n.label++,{value:a[1],done:!1};case 5:n.label++,o=a[1],a=[0];continue;case 7:a=n.ops.pop(),n.trys.pop();continue;default:if(!(i=n.trys,(i=i.length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){n=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){n.label=a[1];break}if(6===a[0]&&n.label<i[1]){n.label=i[1],i=a;break}if(i&&n.label<i[2]){n.label=i[2],n.ops.push(a);break}i[2]&&n.ops.pop(),n.trys.pop();continue}a=e.call(t,n)}catch(t){a=[6,t],o=0}finally{r=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,p])}}}var _t=Object.create?function(t,e,r,o){void 0===o&&(o=r);var i=Object.getOwnPropertyDescriptor(e,r);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[r]}}),Object.defineProperty(t,o,i)}:function(t,e,r,o){void 0===o&&(o=r),t[o]=e[r]};function St(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||_t(e,t,r)}function Et(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],o=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&o>=t.length&&(t=void 0),{value:t&&t[o++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function Ot(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var o,i,n=r.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(o=n.next()).done;)s.push(o.value)}catch(t){i={error:t}}finally{try{o&&!o.done&&(r=n.return)&&r.call(n)}finally{if(i)throw i.error}}return s}function Ft(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(Ot(arguments[e]));return t}function Rt(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var o=Array(t),i=0;for(e=0;e<r;e++)for(var n=arguments[e],s=0,a=n.length;s<a;s++,i++)o[i]=n[s];return o}function Tt(t,e,r){if(r||2===arguments.length)for(var o,i=0,n=e.length;i<n;i++)!o&&i in e||(o||(o=Array.prototype.slice.call(e,0,i)),o[i]=e[i]);return t.concat(o||Array.prototype.slice.call(e))}function kt(t){return this instanceof kt?(this.v=t,this):new kt(t)}function At(t,e,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var o,i=r.apply(t,e||[]),n=[];return o=Object.create(("function"==typeof AsyncIterator?AsyncIterator:Object).prototype),s("next"),s("throw"),s("return",(function(t){return function(e){return Promise.resolve(e).then(t,c)}})),o[Symbol.asyncIterator]=function(){return this},o;function s(t,e){i[t]&&(o[t]=function(e){return new Promise((function(r,o){n.push([t,e,r,o])>1||a(t,e)}))},e&&(o[t]=e(o[t])))}function a(t,e){try{(r=i[t](e)).value instanceof kt?Promise.resolve(r.value.v).then(p,c):u(n[0][2],r)}catch(t){u(n[0][3],t)}var r}function p(t){a("next",t)}function c(t){a("throw",t)}function u(t,e){t(e),n.shift(),n.length&&a(n[0][0],n[0][1])}}function Pt(t){var e,r;return e={},o("next"),o("throw",(function(t){throw t})),o("return"),e[Symbol.iterator]=function(){return this},e;function o(o,i){e[o]=t[o]?function(e){return(r=!r)?{value:kt(t[o](e)),done:!1}:i?i(e):e}:i}}function Nt(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,r=t[Symbol.asyncIterator];return r?r.call(t):(t=Et(t),e={},o("next"),o("throw"),o("return"),e[Symbol.asyncIterator]=function(){return this},e);function o(r){e[r]=t[r]&&function(e){return new Promise((function(o,i){(function(t,e,r,o){Promise.resolve(o).then((function(e){t({value:e,done:r})}),e)})(o,i,(e=t[r](e)).done,e.value)}))}}}function It(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}var Ct=Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e},Bt=function(t){return Bt=Object.getOwnPropertyNames||function(t){var e=[];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[e.length]=r);return e},Bt(t)};function xt(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r=Bt(t),o=0;o<r.length;o++)"default"!==r[o]&&_t(e,t,r[o]);return Ct(e,t),e}function jt(t){return t&&t.__esModule?t:{default:t}}function Dt(t,e,r,o){if("a"===r&&!o)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?o:"a"===r?o.call(t):o?o.value:e.get(t)}function Lt(t,e,r,o,i){if("m"===o)throw new TypeError("Private method is not writable");if("a"===o&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===o?i.call(t,r):i?i.value=r:e.set(t,r),r}function Mt(t,e){if(null===e||"object"!=typeof e&&"function"!=typeof e)throw new TypeError("Cannot use 'in' operator on non-object");return"function"==typeof t?e===t:t.has(e)}function Ut(t,e,r){if(null!=e){if("object"!=typeof e&&"function"!=typeof e)throw new TypeError("Object expected.");var o,i;if(r){if(!Symbol.asyncDispose)throw new TypeError("Symbol.asyncDispose is not defined.");o=e[Symbol.asyncDispose]}if(void 0===o){if(!Symbol.dispose)throw new TypeError("Symbol.dispose is not defined.");o=e[Symbol.dispose],r&&(i=o)}if("function"!=typeof o)throw new TypeError("Object not disposable.");i&&(o=function(){try{i.call(this)}catch(t){return Promise.reject(t)}}),t.stack.push({value:e,dispose:o,async:r})}else r&&t.stack.push({async:!0});return e}var Wt="function"==typeof SuppressedError?SuppressedError:function(t,e,r){var o=new Error(r);return o.name="SuppressedError",o.error=t,o.suppressed=e,o};function $t(t){function e(e){t.error=t.hasError?new Wt(e,t.error,"An error was suppressed during disposal."):e,t.hasError=!0}var r,o=0;return function i(){for(;r=t.stack.pop();)try{if(!r.async&&1===o)return o=0,t.stack.push(r),Promise.resolve().then(i);if(r.dispose){var n=r.dispose.call(r.value);if(r.async)return o|=2,Promise.resolve(n).then(i,(function(t){return e(t),i()}))}else o|=1}catch(t){e(t)}if(1===o)return t.hasError?Promise.reject(t.error):Promise.resolve();if(t.hasError)throw t.error}()}function Vt(t,e){return"string"==typeof t&&/^\.\.?\//.test(t)?t.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i,(function(t,r,o,i,n){return r?e?".jsx":".js":!o||i&&n?o+i+"."+n.toLowerCase()+"js":t})):t}var zt,Gt={__extends:ct,__assign:ut,__rest:ht,__decorate:lt,__param:ft,__esDecorate:dt,__runInitializers:yt,__propKey:gt,__setFunctionName:mt,__metadata:bt,__awaiter:vt,__generator:wt,__createBinding:_t,__exportStar:St,__values:Et,__read:Ot,__spread:Ft,__spreadArrays:Rt,__spreadArray:Tt,__await:kt,__asyncGenerator:At,__asyncDelegator:Pt,__asyncValues:Nt,__makeTemplateObject:It,__importStar:xt,__importDefault:jt,__classPrivateFieldGet:Dt,__classPrivateFieldSet:Lt,__classPrivateFieldIn:Mt,__addDisposableResource:Ut,__disposeResources:$t,__rewriteRelativeImportExtension:Vt},Ht=m(Object.freeze({__proto__:null,__addDisposableResource:Ut,get __assign(){return ut},__asyncDelegator:Pt,__asyncGenerator:At,__asyncValues:Nt,__await:kt,__awaiter:vt,__classPrivateFieldGet:Dt,__classPrivateFieldIn:Mt,__classPrivateFieldSet:Lt,__createBinding:_t,__decorate:lt,__disposeResources:$t,__esDecorate:dt,__exportStar:St,__extends:ct,__generator:wt,__importDefault:jt,__importStar:xt,__makeTemplateObject:It,__metadata:bt,__param:ft,__propKey:gt,__read:Ot,__rest:ht,__rewriteRelativeImportExtension:Vt,__runInitializers:yt,__setFunctionName:mt,__spread:Ft,__spreadArray:Tt,__spreadArrays:Rt,__values:Et,default:Gt})),qt={};var Kt,Yt,Jt={};function Xt(){return Yt||(Yt=1,function(t){Object.defineProperty(t,"__esModule",{value:!0});const e=Ht;e.__exportStar((zt||(zt=1,Object.defineProperty(qt,"__esModule",{value:!0}),qt.printTree=void 0,qt.printTree=(t="",e)=>{let r="",o=e.length-1;for(;o>=0&&!e[o];o--);for(let i=0;i<=o;i++){const n=e[i];if(!n)continue;const s=i===o,a=n(t+(s?" ":"│")+"  ");r+="\n"+t+(a?s?"└─":"├─":"│")+(a?" "+a:"")}return r}),qt),t),e.__exportStar((Kt||(Kt=1,Object.defineProperty(Jt,"__esModule",{value:!0}),Jt.printBinary=void 0,Jt.printBinary=(t="",e)=>{const r=e[0],o=e[1];let i="";return r&&(i+="\n"+t+"← "+r(t+"  ")),o&&(i+="\n"+t+"→ "+o(t+"  ")),i}),Jt),t)}(at)),at}var Zt,Qt,te={};function ee(){return Qt||(Qt=1,function(t){Object.defineProperty(t,"__esModule",{value:!0}),t.toTreeSync=void 0;const e=Xt(),r=function(){if(Zt)return te;Zt=1,Object.defineProperty(te,"__esModule",{value:!0}),te.newNotAllowedError=te.newTypeMismatchError=te.newNotFoundError=te.assertCanWrite=te.assertName=te.basename=te.ctx=void 0,te.ctx=(t={})=>Object.assign({separator:"/",syncHandleAllowed:!1,mode:"read"},t),te.basename=(t,e)=>{t[t.length-1]===e&&(t=t.slice(0,-1));const r=t.lastIndexOf(e);return-1===r?t:t.slice(r+1)};const t=/^(\.{1,2})$|^(.*([\/\\]).*)$/;return te.assertName=(e,r,o)=>{if(!e||t.test(e))throw new TypeError(`Failed to execute '${r}' on '${o}': Name is not allowed.`)},te.assertCanWrite=t=>{if("readwrite"!==t)throw new DOMException("The request is not allowed by the user agent or the platform in the current context.","NotAllowedError")},te.newNotFoundError=()=>new DOMException("A requested file or directory could not be found at the time an operation was processed.","NotFoundError"),te.newTypeMismatchError=()=>new DOMException("The path supplied exists, but was not an entry of requested type.","TypeMismatchError"),te.newNotAllowedError=()=>new DOMException("Permission not granted.","NotAllowedError"),te}();t.toTreeSync=(o,i={})=>{var n;const s=i.separator||"/";let a=i.dir||s;a[a.length-1]!==s&&(a+=s);const p=i.tab||"",c=null!==(n=i.depth)&&void 0!==n?n:10;let u=" (...)";if(c>0){const r=o.readdirSync(a,{withFileTypes:!0});u=(0,e.printTree)(p,r.map((e=>r=>e.isDirectory()?(0,t.toTreeSync)(o,{dir:a+e.name,depth:c-1,tab:r}):e.isSymbolicLink()?e.name+" → "+o.readlinkSync(a+e.name):""+e.name)))}return(0,r.basename)(a,s)+s+u}}(st)),st}var re,oe={};var ie,ne,se={};function ae(){if(ne)return M;ne=1,Object.defineProperty(M,"__esModule",{value:!0}),M.FSWatcher=M.StatWatcher=M.Volume=void 0,M.filenameToSteps=gt,M.pathToSteps=function(t){return gt((0,R.pathToFilename)(t))},M.dataToStr=function(t,e=m.ENCODING_UTF8){return p.Buffer.isBuffer(t)?t.toString(e):t instanceof Uint8Array?(0,p.bufferFrom)(t).toString(e):String(t)},M.toUnixTimestamp=mt;const t=n,e=(L||(L=1,function(t){Object.defineProperty(t,"__esModule",{value:!0}),t.File=t.Link=t.Node=t.SEP=void 0;const e=$(),r=A(),o=E(),i=s,n=O(),{S_IFMT:a,S_IFDIR:p,S_IFREG:c,S_IFLNK:u,O_APPEND:h}=o.constants,l=()=>{var t,r;return null!==(r=null===(t=e.default.getuid)||void 0===t?void 0:t.call(e.default))&&void 0!==r?r:0},f=()=>{var t,r;return null!==(r=null===(t=e.default.getgid)||void 0===t?void 0:t.call(e.default))&&void 0!==r?r:0};t.SEP="/";class d extends i.EventEmitter{constructor(t,e=438){super(),this._uid=l(),this._gid=f(),this._atime=new Date,this._mtime=new Date,this._ctime=new Date,this._perm=438,this.mode=c,this._nlink=1,this._perm=e,this.mode|=e,this.ino=t}set ctime(t){this._ctime=t}get ctime(){return this._ctime}set uid(t){this._uid=t,this.ctime=new Date}get uid(){return this._uid}set gid(t){this._gid=t,this.ctime=new Date}get gid(){return this._gid}set atime(t){this._atime=t,this.ctime=new Date}get atime(){return this._atime}set mtime(t){this._mtime=t,this.ctime=new Date}get mtime(){return this._mtime}set perm(t){this._perm=t,this.ctime=new Date}get perm(){return this._perm}set nlink(t){this._nlink=t,this.ctime=new Date}get nlink(){return this._nlink}getString(t="utf8"){return this.atime=new Date,this.getBuffer().toString(t)}setString(t){this.buf=(0,r.bufferFrom)(t,"utf8"),this.touch()}getBuffer(){return this.atime=new Date,this.buf||this.setBuffer((0,r.bufferAllocUnsafe)(0)),(0,r.bufferFrom)(this.buf)}setBuffer(t){this.buf=(0,r.bufferFrom)(t),this.touch()}getSize(){return this.buf?this.buf.length:0}setModeProperty(t){this.mode=this.mode&~a|t}setIsFile(){this.setModeProperty(c)}setIsDirectory(){this.setModeProperty(p)}setIsSymlink(){this.setModeProperty(u)}isFile(){return(this.mode&a)===c}isDirectory(){return(this.mode&a)===p}isSymlink(){return(this.mode&a)===u}makeSymlink(t){this.symlink=t,this.setIsSymlink()}write(t,e=0,o=t.length,i=0){if(this.buf||(this.buf=(0,r.bufferAllocUnsafe)(0)),i+o>this.buf.length){const t=(0,r.bufferAllocUnsafe)(i+o);this.buf.copy(t,0,0,this.buf.length),this.buf=t}return t.copy(this.buf,i,e,e+o),this.touch(),o}read(t,e=0,o=t.byteLength,i=0){this.atime=new Date,this.buf||(this.buf=(0,r.bufferAllocUnsafe)(0));let n=o;n>t.byteLength&&(n=t.byteLength),n+i>this.buf.length&&(n=this.buf.length-i);const s=t instanceof r.Buffer?t:r.Buffer.from(t.buffer);return this.buf.copy(s,e,i,i+n),n}truncate(t=0){if(t)if(this.buf||(this.buf=(0,r.bufferAllocUnsafe)(0)),t<=this.buf.length)this.buf=this.buf.slice(0,t);else{const e=(0,r.bufferAllocUnsafe)(t);this.buf.copy(e),e.fill(0,this.buf.length),this.buf=e}else this.buf=(0,r.bufferAllocUnsafe)(0);this.touch()}chmod(t){this.perm=t,this.mode=-512&this.mode|t,this.touch()}chown(t,e){this.uid=t,this.gid=e,this.touch()}touch(){this.mtime=new Date,this.emit("change",this)}canRead(t=l(),e=f()){return!!(4&this.perm)||!!(e===this.gid&&32&this.perm)||!!(t===this.uid&&256&this.perm)}canWrite(t=l(),e=f()){return!!(2&this.perm)||!!(e===this.gid&&16&this.perm)||!!(t===this.uid&&128&this.perm)}canExecute(t=l(),e=f()){return!!(1&this.perm)||!!(e===this.gid&&8&this.perm)||!!(t===this.uid&&64&this.perm)}del(){this.emit("delete",this)}toJSON(){return{ino:this.ino,uid:this.uid,gid:this.gid,atime:this.atime.getTime(),mtime:this.mtime.getTime(),ctime:this.ctime.getTime(),perm:this.perm,mode:this.mode,nlink:this.nlink,symlink:this.symlink,data:this.getString()}}}t.Node=d;class y extends i.EventEmitter{get steps(){return this._steps}set steps(t){this._steps=t;for(const[t,e]of this.children.entries())"."!==t&&".."!==t&&(null==e||e.syncSteps())}constructor(t,e,r){super(),this.children=new Map,this._steps=[],this.ino=0,this.length=0,this.vol=t,this.parent=e,this.name=r,this.syncSteps()}setNode(t){this.node=t,this.ino=t.ino}getNode(){return this.node}createChild(t,e=this.vol.createNode()){const r=new y(this.vol,this,t);return r.setNode(e),e.isDirectory()&&(r.children.set(".",r),r.getNode().nlink++),this.setChild(t,r),r}setChild(t,e=new y(this.vol,this,t)){return this.children.set(t,e),e.parent=this,this.length++,e.getNode().isDirectory()&&(e.children.set("..",this),this.getNode().nlink++),this.getNode().mtime=new Date,this.emit("child:add",e,this),e}deleteChild(t){t.getNode().isDirectory()&&(t.children.delete(".."),this.getNode().nlink--),this.children.delete(t.getName()),this.length--,this.getNode().mtime=new Date,this.emit("child:delete",t,this)}getChild(t){return this.getNode().mtime=new Date,this.children.get(t)}getPath(){return this.steps.join(t.SEP)}getParentPath(){return this.steps.slice(0,-1).join(t.SEP)}getName(){return this.steps[this.steps.length-1]}toJSON(){return{steps:this.steps,ino:this.ino,children:Array.from(this.children.keys())}}syncSteps(){this.steps=this.parent?this.parent.steps.concat([this.name]):[this.name]}}t.Link=y,t.File=class{constructor(t,e,r,o){this.link=t,this.node=e,this.flags=r,this.fd=o,this.position=0,this.flags&h&&(this.position=this.getSize())}getString(t="utf8"){return this.node.getString()}setString(t){this.node.setString(t)}getBuffer(){return this.node.getBuffer()}setBuffer(t){this.node.setBuffer(t)}getSize(){return this.node.getSize()}truncate(t){this.node.truncate(t)}seekTo(t){this.position=t}stats(){return n.default.build(this.node)}write(t,e=0,r=t.length,o){"number"!=typeof o&&(o=this.position);const i=this.node.write(t,e,r,o);return this.position=o+i,i}read(t,e=0,r=t.byteLength,o){"number"!=typeof o&&(o=this.position);const i=this.node.read(t,e,r,o);return this.position=o+i,i}chmod(t){this.node.chmod(t)}chown(t,e){this.node.chown(t,e)}}}(U)),U),r=O(),o=j(),p=A(),c=function(){if(V)return z;let t;return V=1,Object.defineProperty(z,"__esModule",{value:!0}),t="function"==typeof setImmediate?setImmediate.bind("undefined"!=typeof globalThis?globalThis:y):setTimeout.bind("undefined"!=typeof globalThis?globalThis:y),z.default=t,z}(),u=q(),h=$(),l=(K||(K=1,Object.defineProperty(Y,"__esModule",{value:!0}),Y.default=function(t,e,r){const o=setTimeout.apply("undefined"!=typeof globalThis?globalThis:y,arguments);return o&&"object"==typeof o&&"function"==typeof o.unref&&o.unref(),o}),Y),f=a,d=E(),g=s,m=x(),b=function(){if(Z)return Q;Z=1,Object.defineProperty(Q,"__esModule",{value:!0}),Q.FileHandle=void 0;const t=ot();return Q.FileHandle=class{constructor(t,e){this.fs=t,this.fd=e}appendFile(e,r){return(0,t.promisify)(this.fs,"appendFile")(this.fd,e,r)}chmod(e){return(0,t.promisify)(this.fs,"fchmod")(this.fd,e)}chown(e,r){return(0,t.promisify)(this.fs,"fchown")(this.fd,e,r)}close(){return(0,t.promisify)(this.fs,"close")(this.fd)}datasync(){return(0,t.promisify)(this.fs,"fdatasync")(this.fd)}readableWebStream(t){return new ReadableStream({pull:async t=>{const e=await this.readFile();t.enqueue(e),t.close()}})}read(e,r,o,i){return(0,t.promisify)(this.fs,"read",(t=>({bytesRead:t,buffer:e})))(this.fd,e,r,o,i)}readv(e,r){return(0,t.promisify)(this.fs,"readv",(t=>({bytesRead:t,buffers:e})))(this.fd,e,r)}readFile(e){return(0,t.promisify)(this.fs,"readFile")(this.fd,e)}stat(e){return(0,t.promisify)(this.fs,"fstat")(this.fd,e)}sync(){return(0,t.promisify)(this.fs,"fsync")(this.fd)}truncate(e){return(0,t.promisify)(this.fs,"ftruncate")(this.fd,e)}utimes(e,r){return(0,t.promisify)(this.fs,"futimes")(this.fd,e,r)}write(e,r,o,i){return(0,t.promisify)(this.fs,"write",(t=>({bytesWritten:t,buffer:e})))(this.fd,e,r,o,i)}writev(e,r){return(0,t.promisify)(this.fs,"writev",(t=>({bytesWritten:t,buffers:e})))(this.fd,e,r)}writeFile(e,r){return(0,t.promisify)(this.fs,"writeFile")(this.fd,e,r)}},Q}(),v=i,w=function(){if(it)return nt;it=1,Object.defineProperty(nt,"__esModule",{value:!0}),nt.FsPromises=void 0;const t=ot(),e=E();return nt.FsPromises=class{constructor(r,o){this.fs=r,this.FileHandle=o,this.constants=e.constants,this.cp=(0,t.promisify)(this.fs,"cp"),this.opendir=(0,t.promisify)(this.fs,"opendir"),this.statfs=(0,t.promisify)(this.fs,"statfs"),this.lutimes=(0,t.promisify)(this.fs,"lutimes"),this.access=(0,t.promisify)(this.fs,"access"),this.chmod=(0,t.promisify)(this.fs,"chmod"),this.chown=(0,t.promisify)(this.fs,"chown"),this.copyFile=(0,t.promisify)(this.fs,"copyFile"),this.lchmod=(0,t.promisify)(this.fs,"lchmod"),this.lchown=(0,t.promisify)(this.fs,"lchown"),this.link=(0,t.promisify)(this.fs,"link"),this.lstat=(0,t.promisify)(this.fs,"lstat"),this.mkdir=(0,t.promisify)(this.fs,"mkdir"),this.mkdtemp=(0,t.promisify)(this.fs,"mkdtemp"),this.readdir=(0,t.promisify)(this.fs,"readdir"),this.readlink=(0,t.promisify)(this.fs,"readlink"),this.realpath=(0,t.promisify)(this.fs,"realpath"),this.rename=(0,t.promisify)(this.fs,"rename"),this.rmdir=(0,t.promisify)(this.fs,"rmdir"),this.rm=(0,t.promisify)(this.fs,"rm"),this.stat=(0,t.promisify)(this.fs,"stat"),this.symlink=(0,t.promisify)(this.fs,"symlink"),this.truncate=(0,t.promisify)(this.fs,"truncate"),this.unlink=(0,t.promisify)(this.fs,"unlink"),this.utimes=(0,t.promisify)(this.fs,"utimes"),this.readFile=(e,r)=>(0,t.promisify)(this.fs,"readFile")(e instanceof this.FileHandle?e.fd:e,r),this.appendFile=(e,r,o)=>(0,t.promisify)(this.fs,"appendFile")(e instanceof this.FileHandle?e.fd:e,r,o),this.open=(e,r="r",o)=>(0,t.promisify)(this.fs,"open",(t=>new this.FileHandle(this.fs,t)))(e,r,o),this.writeFile=(e,r,o)=>((0,t.isReadableStream)(r)?(0,t.streamToBuffer)(r):Promise.resolve(r)).then((r=>(0,t.promisify)(this.fs,"writeFile")(e instanceof this.FileHandle?e.fd:e,r,o))),this.watch=()=>{throw new Error("Not implemented")}}},nt}(),_=ee(),S=rt(),F=(re||(re=1,function(t){Object.defineProperty(t,"__esModule",{value:!0}),t.getWriteFileOptions=t.writeFileDefaults=t.getRealpathOptsAndCb=t.getRealpathOptions=t.getStatOptsAndCb=t.getStatOptions=t.getAppendFileOptsAndCb=t.getAppendFileOpts=t.getOpendirOptsAndCb=t.getOpendirOptions=t.getReaddirOptsAndCb=t.getReaddirOptions=t.getReadFileOptions=t.getRmOptsAndCb=t.getRmdirOptions=t.getDefaultOptsAndCb=t.getDefaultOpts=t.optsDefaults=t.getMkdirOptions=void 0,t.getOptions=s,t.optsGenerator=a,t.optsAndCbGenerator=p;const e=rt(),r=x(),o=ot(),i={mode:511,recursive:!1};t.getMkdirOptions=t=>"number"==typeof t?Object.assign({},i,{mode:t}):Object.assign({},i,t);const n=t=>`Expected options to be either an object or a string, but got ${t} instead`;function s(t,e){let o;if(!e)return t;{const r=typeof e;switch(r){case"string":o=Object.assign({},t,{encoding:e});break;case"object":o=Object.assign({},t,e);break;default:throw TypeError(n(r))}}return"buffer"!==o.encoding&&(0,r.assertEncoding)(o.encoding),o}function a(t){return e=>s(t,e)}function p(t){return(e,r)=>"function"==typeof e?[t(),e]:[t(e),(0,o.validateCallback)(r)]}t.optsDefaults={encoding:"utf8"},t.getDefaultOpts=a(t.optsDefaults),t.getDefaultOptsAndCb=p(t.getDefaultOpts);const c={recursive:!1};t.getRmdirOptions=t=>Object.assign({},c,t);const u=a(t.optsDefaults);t.getRmOptsAndCb=p(u),t.getReadFileOptions=a({flag:"r"}),t.getReaddirOptions=a({encoding:"utf8",recursive:!1,withFileTypes:!1}),t.getReaddirOptsAndCb=p(t.getReaddirOptions),t.getOpendirOptions=a({encoding:"utf8",bufferSize:32,recursive:!1}),t.getOpendirOptsAndCb=p(t.getOpendirOptions);const h={encoding:"utf8",mode:438,flag:e.FLAGS[e.FLAGS.a]};t.getAppendFileOpts=a(h),t.getAppendFileOptsAndCb=p(t.getAppendFileOpts);const l={bigint:!1};t.getStatOptions=(t={})=>Object.assign({},l,t),t.getStatOptsAndCb=(e,r)=>"function"==typeof e?[(0,t.getStatOptions)(),e]:[(0,t.getStatOptions)(e),(0,o.validateCallback)(r)];const f=t.optsDefaults;t.getRealpathOptions=a(f),t.getRealpathOptsAndCb=p(t.getRealpathOptions),t.writeFileDefaults={encoding:"utf8",mode:438,flag:e.FLAGS[e.FLAGS.w]},t.getWriteFileOptions=a(t.writeFileDefaults)}(oe)),oe),R=ot(),T=function(){if(ie)return se;ie=1,Object.defineProperty(se,"__esModule",{value:!0}),se.Dir=void 0;const t=ot(),e=j();let r=class{constructor(t,e){this.link=t,this.options=e,this.iteratorInfo=[],this.path=t.getParentPath(),this.iteratorInfo.push(t.children[Symbol.iterator]())}wrapAsync(e,r,o){(0,t.validateCallback)(o),setImmediate((()=>{let t;try{t=e.apply(this,r)}catch(t){return void o(t)}o(null,t)}))}isFunction(t){return"function"==typeof t}promisify(t,e){return(...r)=>new Promise(((o,i)=>{this.isFunction(t[e])?t[e].bind(t)(...r,((t,e)=>{t&&i(t),o(e)})):i("Not a function")}))}closeBase(){}readBase(t){let r,o,i,n;do{do{if(({done:r,value:o}=t[t.length-1].next()),r)break;[i,n]=o}while("."===i||".."===i);if(!r)return this.options.recursive&&n.children.size&&t.push(n.children[Symbol.iterator]()),e.default.build(n,this.options.encoding);if(t.pop(),0===t.length)break;r=!1}while(!r);return null}closeBaseAsync(t){this.wrapAsync(this.closeBase,[],t)}close(t){if("function"!=typeof t)return this.promisify(this,"closeBaseAsync")();this.closeBaseAsync(t)}closeSync(){this.closeBase()}readBaseAsync(t){this.wrapAsync(this.readBase,[this.iteratorInfo],t)}read(t){if("function"!=typeof t)return this.promisify(this,"readBaseAsync")();this.readBaseAsync(t)}readSync(){return this.readBase(this.iteratorInfo)}[Symbol.asyncIterator](){const t=[],e=this;t.push(e.link.children[Symbol.iterator]());const r={readBaseAsync(r){e.wrapAsync(e.readBase,[t],r)}};return{async next(){const t=await e.promisify(r,"readBaseAsync")();return null!==t?{done:!1,value:t}:{done:!0,value:void 0}},[Symbol.asyncIterator](){throw new Error("Not implemented")}}}};return se.Dir=r,se}(),k=t.resolve,{O_RDONLY:P,O_WRONLY:N,O_RDWR:I,O_CREAT:C,O_EXCL:B,O_TRUNC:D,O_APPEND:W,O_DIRECTORY:G,O_SYMLINK:H,F_OK:J,COPYFILE_EXCL:X,COPYFILE_FICLONE_FORCE:tt}=d.constants,{sep:et,relative:st,join:at,dirname:pt}=t.posix?t.posix:t,ct="ENOENT",ut="EBADF",ht="EEXIST",lt="ENOTDIR",ft="EACCES",dt="EISDIR";let yt=(t,e=h.default.cwd())=>k(e,t);if(R.isWin){const t=yt;yt=(e,r)=>(0,R.unixify)(t(e,r))}function gt(t,e){const r=yt(t,e).substring(1);return r?r.split(et):[]}function mt(t){if("string"==typeof t&&+t==t)return+t;if(t instanceof Date)return t.getTime()/1e3;if(isFinite(t))return t<0?Date.now()/1e3:t;throw new Error("Cannot parse time: "+t)}function bt(t){if("number"!=typeof t)throw TypeError(S.ERRSTR.UID)}function vt(t){if("number"!=typeof t)throw TypeError(S.ERRSTR.GID)}const wt=()=>{throw new Error("Not implemented")};class _t{static fromJSON(t,e){const r=new _t;return r.fromJSON(t,e),r}static fromNestedJSON(t,e){const r=new _t;return r.fromNestedJSON(t,e),r}get promises(){if(null===this.promisesApi)throw new Error("Promise is not supported in this environment.");return this.promisesApi}constructor(t={}){this.ino=0,this.inodes={},this.releasedInos=[],this.fds={},this.releasedFds=[],this.maxFiles=1e4,this.openFiles=0,this.promisesApi=new w.FsPromises(this,b.FileHandle),this.statWatchers={},this.cpSync=wt,this.statfsSync=wt,this.cp=wt,this.statfs=wt,this.openAsBlob=wt,this.props=Object.assign({Node:e.Node,Link:e.Link,File:e.File},t);const r=this.createLink();r.setNode(this.createNode(!0));const o=this;this.StatWatcher=class extends Et{constructor(){super(o)}};const i=Ft;this.ReadStream=class extends i{constructor(...t){super(o,...t)}};const n=Tt;this.WriteStream=class extends n{constructor(...t){super(o,...t)}},this.FSWatcher=class extends kt{constructor(){super(o)}},r.setChild(".",r),r.getNode().nlink++,r.setChild("..",r),r.getNode().nlink++,this.root=r}createLink(t,e,r=!1,o){if(!t)return new this.props.Link(this,null,"");if(!e)throw new Error("createLink: name cannot be empty");return t.createChild(e,this.createNode(r,o))}deleteLink(t){const e=t.parent;return!!e&&(e.deleteChild(t),!0)}newInoNumber(){const t=this.releasedInos.pop();return t||(this.ino=(this.ino+1)%4294967295,this.ino)}newFdNumber(){const t=this.releasedFds.pop();return"number"==typeof t?t:_t.fd--}createNode(t=!1,e){null!=e||(e=t?511:438);const r=new this.props.Node(this.newInoNumber(),e);return t&&r.setIsDirectory(),this.inodes[r.ino]=r,r}deleteNode(t){t.del(),delete this.inodes[t.ino],this.releasedInos.push(t.ino)}walk(t,r=!1,o=!1,i=!1,n){var s;let a,p;t instanceof e.Link?(a=t.steps,p=et+a.join(et)):"string"==typeof t?(a=gt(t),p=t):(a=t,p=et+a.join(et));let c=this.root,u=0;for(;u<a.length;){let t=c.getNode();if(t.isDirectory()){if(i&&!t.canExecute())throw(0,R.createError)(ft,n,p)}else if(u<a.length-1)throw(0,R.createError)(lt,n,p);if(c=null!==(s=c.getChild(a[u]))&&void 0!==s?s:null,!c){if(o)throw(0,R.createError)(ct,n,p);return null}t=null==c?void 0:c.getNode(),r&&t.isSymlink()?(a=t.symlink.concat(a.slice(u+1)),c=this.root,u=0):u++}return c}getLink(t){return this.walk(t,!1,!1,!1)}getLinkOrThrow(t,e){return this.walk(t,!1,!0,!0,e)}getResolvedLink(t){return this.walk(t,!0,!1,!1)}getResolvedLinkOrThrow(t,e){return this.walk(t,!0,!0,!0,e)}resolveSymlinks(t){return this.getResolvedLink(t.steps.slice(1))}getLinkAsDirOrThrow(t,e){const r=this.getLinkOrThrow(t,e);if(!r.getNode().isDirectory())throw(0,R.createError)(lt,e,t);return r}getLinkParent(t){return this.getLink(t.slice(0,-1))}getLinkParentAsDirOrThrow(t,e){const r=(t instanceof Array?t:gt(t)).slice(0,-1),o=et+r.join(et),i=this.getLinkOrThrow(o,e);if(!i.getNode().isDirectory())throw(0,R.createError)(lt,e,o);return i}getFileByFd(t){return this.fds[String(t)]}getFileByFdOrThrow(t,e){if(!(0,R.isFd)(t))throw TypeError(S.ERRSTR.FD);const r=this.getFileByFd(t);if(!r)throw(0,R.createError)(ut,e);return r}wrapAsync(t,e,r){(0,R.validateCallback)(r),(0,c.default)((()=>{let o;try{o=t.apply(this,e)}catch(t){return void r(t)}r(null,o)}))}_toJSON(t=this.root,e={},r,o){let i=!0,n=t.children;t.getNode().isFile()&&(n=new Map([[t.getName(),t.parent.getChild(t.getName())]]),t=t.parent);for(const s of n.keys()){if("."===s||".."===s)continue;i=!1;const n=t.getChild(s);if(!n)throw new Error("_toJSON: unexpected undefined");const a=n.getNode();if(a.isFile()){let t=n.getPath();r&&(t=st(r,t)),e[t]=o?a.getBuffer():a.getString()}else a.isDirectory()&&this._toJSON(n,e,r,o)}let s=t.getPath();return r&&(s=st(r,s)),s&&i&&(e[s]=null),e}toJSON(t,e={},r=!1,o=!1){const i=[];if(t){Array.isArray(t)||(t=[t]);for(const e of t){const t=(0,R.pathToFilename)(e),r=this.getResolvedLink(t);r&&i.push(r)}}else i.push(this.root);if(!i.length)return e;for(const t of i)this._toJSON(t,e,r?t.getPath():"",o);return e}fromJSON(t,e=h.default.cwd()){for(let r in t){const o=t[r];if(r=yt(r,e),"string"==typeof o||o instanceof p.Buffer){const t=pt(r);this.mkdirpBase(t,511),this.writeFileSync(r,o)}else this.mkdirpBase(r,511)}}fromNestedJSON(t,e){this.fromJSON(function(t){const e={};return function t(r,o){for(const i in o){const n=o[i],s=at(r,i);"string"==typeof n||n instanceof p.Buffer?e[s]=n:"object"==typeof n&&null!==n&&Object.keys(n).length>0?t(s,n):e[s]=null}}("",t),e}(t),e)}toTree(t={separator:et}){return(0,_.toTreeSync)(this,t)}reset(){this.ino=0,this.inodes={},this.releasedInos=[],this.fds={},this.releasedFds=[],this.openFiles=0,this.root=this.createLink(),this.root.setNode(this.createNode(!0))}mountSync(t,e){this.fromJSON(e,t)}openLink(t,e,r=!0){if(this.openFiles>=this.maxFiles)throw(0,R.createError)("EMFILE","open",t.getPath());let o=t;r&&(o=this.getResolvedLinkOrThrow(t.getPath(),"open"));const i=o.getNode();if(i.isDirectory()){if((e&(P|I|N))!==P)throw(0,R.createError)(dt,"open",t.getPath())}else if(e&G)throw(0,R.createError)(lt,"open",t.getPath());if(!(e&N||i.canRead()))throw(0,R.createError)(ft,"open",t.getPath());if(!(e&P||i.canWrite()))throw(0,R.createError)(ft,"open",t.getPath());const n=new this.props.File(t,i,e,this.newFdNumber());return this.fds[n.fd]=n,this.openFiles++,e&D&&n.truncate(),n}openFile(e,r,o,i=!0){const n=gt(e);let s;try{if(s=i?this.getResolvedLinkOrThrow(e,"open"):this.getLinkOrThrow(e,"open"),s&&r&C&&r&B)throw(0,R.createError)(ht,"open",e)}catch(i){if(!(i.code===ct&&r&C))throw i;{const r=t.dirname(e),i=this.getResolvedLinkOrThrow(r),a=i.getNode();if(!a.isDirectory())throw(0,R.createError)(lt,"open",e);if(!a.canExecute()||!a.canWrite())throw(0,R.createError)(ft,"open",e);null!=o||(o=438),s=this.createLink(i,n[n.length-1],!1,o)}}if(s)return this.openLink(s,r,i);throw(0,R.createError)(ct,"open",e)}openBase(t,e,r,o=!0){const i=this.openFile(t,e,r,o);if(!i)throw(0,R.createError)(ct,"open",t);return i.fd}openSync(t,e,r=438){const o=(0,R.modeToNumber)(r),i=(0,R.pathToFilename)(t),n=(0,R.flagsToNumber)(e);return this.openBase(i,n,o,!(n&H))}open(t,e,r,o){let i=r,n=o;"function"==typeof r&&(i=438,n=r),i=i||438;const s=(0,R.modeToNumber)(i),a=(0,R.pathToFilename)(t),p=(0,R.flagsToNumber)(e);this.wrapAsync(this.openBase,[a,p,s,!(p&H)],n)}closeFile(t){this.fds[t.fd]&&(this.openFiles--,delete this.fds[t.fd],this.releasedFds.push(t.fd))}closeSync(t){(0,R.validateFd)(t);const e=this.getFileByFdOrThrow(t,"close");this.closeFile(e)}close(t,e){(0,R.validateFd)(t),this.wrapAsync(this.closeSync,[t],e)}openFileOrGetById(t,e,r){if("number"==typeof t){const e=this.fds[t];if(!e)throw(0,R.createError)(ct);return e}return this.openFile((0,R.pathToFilename)(t),e,r)}readBase(t,e,r,o,i){if(e.byteLength<o)throw(0,R.createError)("ERR_OUT_OF_RANGE","read",void 0,void 0,RangeError);const n=this.getFileByFdOrThrow(t);if(n.node.isSymlink())throw(0,R.createError)("EPERM","read",n.link.getPath());return n.read(e,Number(r),Number(o),-1===i||"number"!=typeof i?void 0:i)}readSync(t,e,r,o,i){return(0,R.validateFd)(t),this.readBase(t,e,r,o,i)}read(t,e,r,o,i,n){if((0,R.validateCallback)(n),0===o)return(0,u.default)((()=>{n&&n(null,0,e)}));(0,c.default)((()=>{try{const s=this.readBase(t,e,r,o,i);n(null,s,e)}catch(t){n(t)}}))}readvBase(t,e,r){const o=this.getFileByFdOrThrow(t);let i=null!=r?r:void 0;-1===i&&(i=void 0);let n=0;for(const t of e){const e=o.read(t,0,t.byteLength,i);if(i=void 0,n+=e,e<t.byteLength)break}return n}readv(t,e,r,o){let i=r,n=o;"function"==typeof r&&(i=null,n=r),(0,R.validateCallback)(n),(0,c.default)((()=>{try{const r=this.readvBase(t,e,i);n(null,r,e)}catch(t){n(t)}}))}readvSync(t,e,r){return(0,R.validateFd)(t),this.readvBase(t,e,r)}readFileBase(t,e,r){let o;const i="number"==typeof t&&(0,R.isFd)(t);let n;if(i)n=t;else{const r=(0,R.pathToFilename)(t),o=this.getResolvedLinkOrThrow(r,"open");if(o.getNode().isDirectory())throw(0,R.createError)(dt,"open",o.getPath());n=this.openSync(t,e)}try{o=(0,R.bufferToEncoding)(this.getFileByFdOrThrow(n).getBuffer(),r)}finally{i||this.closeSync(n)}return o}readFileSync(t,e){const r=(0,F.getReadFileOptions)(e),o=(0,R.flagsToNumber)(r.flag);return this.readFileBase(t,o,r.encoding)}readFile(t,e,r){const[o,i]=(0,F.optsAndCbGenerator)(F.getReadFileOptions)(e,r),n=(0,R.flagsToNumber)(o.flag);this.wrapAsync(this.readFileBase,[t,n,o.encoding],i)}writeBase(t,e,r,o,i){const n=this.getFileByFdOrThrow(t,"write");if(n.node.isSymlink())throw(0,R.createError)(ut,"write",n.link.getPath());return n.write(e,r,o,-1===i||"number"!=typeof i?void 0:i)}writeSync(t,e,r,o,i){const[,n,s,a,p]=(0,R.getWriteSyncArgs)(t,e,r,o,i);return this.writeBase(t,n,s,a,p)}write(t,e,r,o,i,n){const[,s,a,p,u,h,l]=(0,R.getWriteArgs)(t,e,r,o,i,n);(0,c.default)((()=>{try{const r=this.writeBase(t,a,p,u,h);l(null,r,s?e:a)}catch(t){l(t)}}))}writevBase(t,e,r){const o=this.getFileByFdOrThrow(t);let i=null!=r?r:void 0;-1===i&&(i=void 0);let n=0;for(const t of e){const e=p.Buffer.from(t.buffer,t.byteOffset,t.byteLength),r=o.write(e,0,e.byteLength,i);if(i=void 0,n+=r,r<e.byteLength)break}return n}writev(t,e,r,o){let i=r,n=o;"function"==typeof r&&(i=null,n=r),(0,R.validateCallback)(n),(0,c.default)((()=>{try{const r=this.writevBase(t,e,i);n(null,r,e)}catch(t){n(t)}}))}writevSync(t,e,r){return(0,R.validateFd)(t),this.writevBase(t,e,r)}writeFileBase(t,e,r,o){const i="number"==typeof t;let n;n=i?t:this.openBase((0,R.pathToFilename)(t),r,o);let s=0,a=e.length,p=r&W?void 0:0;try{for(;a>0;){const t=this.writeSync(n,e,s,a,p);s+=t,a-=t,void 0!==p&&(p+=t)}}finally{i||this.closeSync(n)}}writeFileSync(t,e,r){const o=(0,F.getWriteFileOptions)(r),i=(0,R.flagsToNumber)(o.flag),n=(0,R.modeToNumber)(o.mode),s=(0,R.dataToBuffer)(e,o.encoding);this.writeFileBase(t,s,i,n)}writeFile(t,e,r,o){let i=r,n=o;"function"==typeof r&&(i=F.writeFileDefaults,n=r);const s=(0,R.validateCallback)(n),a=(0,F.getWriteFileOptions)(i),p=(0,R.flagsToNumber)(a.flag),c=(0,R.modeToNumber)(a.mode),u=(0,R.dataToBuffer)(e,a.encoding);this.wrapAsync(this.writeFileBase,[t,u,p,c],s)}linkBase(e,r){let o;try{o=this.getLinkOrThrow(e,"link")}catch(t){throw t.code&&(t=(0,R.createError)(t.code,"link",e,r)),t}const i=t.dirname(r);let n;try{n=this.getLinkOrThrow(i,"link")}catch(t){throw t.code&&(t=(0,R.createError)(t.code,"link",e,r)),t}const s=t.basename(r);if(n.getChild(s))throw(0,R.createError)(ht,"link",e,r);const a=o.getNode();a.nlink++,n.createChild(s,a)}copyFileBase(t,e,r){const o=this.readFileSync(t);if(r&X&&this.existsSync(e))throw(0,R.createError)(ht,"copyFile",t,e);if(r&tt)throw(0,R.createError)("ENOSYS","copyFile",t,e);this.writeFileBase(e,o,S.FLAGS.w,438)}copyFileSync(t,e,r){const o=(0,R.pathToFilename)(t),i=(0,R.pathToFilename)(e);return this.copyFileBase(o,i,0|(r||0))}copyFile(t,e,r,o){const i=(0,R.pathToFilename)(t),n=(0,R.pathToFilename)(e);let s,a;"function"==typeof r?(s=0,a=r):(s=r,a=o),(0,R.validateCallback)(a),this.wrapAsync(this.copyFileBase,[i,n,s],a)}linkSync(t,e){const r=(0,R.pathToFilename)(t),o=(0,R.pathToFilename)(e);this.linkBase(r,o)}link(t,e,r){const o=(0,R.pathToFilename)(t),i=(0,R.pathToFilename)(e);this.wrapAsync(this.linkBase,[o,i],r)}unlinkBase(t){const e=this.getLinkOrThrow(t,"unlink");if(e.length)throw Error("Dir not empty...");this.deleteLink(e);const r=e.getNode();r.nlink--,r.nlink<=0&&this.deleteNode(r)}unlinkSync(t){const e=(0,R.pathToFilename)(t);this.unlinkBase(e)}unlink(t,e){const r=(0,R.pathToFilename)(t);this.wrapAsync(this.unlinkBase,[r],e)}symlinkBase(t,e){const r=gt(e);let o;try{o=this.getLinkParentAsDirOrThrow(r)}catch(r){throw r.code&&(r=(0,R.createError)(r.code,"symlink",t,e)),r}const i=r[r.length-1];if(o.getChild(i))throw(0,R.createError)(ht,"symlink",t,e);const n=o.getNode();if(!n.canExecute()||!n.canWrite())throw(0,R.createError)(ft,"symlink",t,e);const s=o.createChild(i);return s.getNode().makeSymlink(gt(t)),s}symlinkSync(t,e,r){const o=(0,R.pathToFilename)(t),i=(0,R.pathToFilename)(e);this.symlinkBase(o,i)}symlink(t,e,r,o){const i=(0,R.validateCallback)("function"==typeof r?r:o),n=(0,R.pathToFilename)(t),s=(0,R.pathToFilename)(e);this.wrapAsync(this.symlinkBase,[n,s],i)}realpathBase(t,e){const r=this.getResolvedLinkOrThrow(t,"realpath");return(0,m.strToEncoding)(r.getPath()||"/",e)}realpathSync(t,e){return this.realpathBase((0,R.pathToFilename)(t),(0,F.getRealpathOptions)(e).encoding)}realpath(t,e,r){const[o,i]=(0,F.getRealpathOptsAndCb)(e,r),n=(0,R.pathToFilename)(t);this.wrapAsync(this.realpathBase,[n,o.encoding],i)}lstatBase(t,e=!1,o=!1){let i;try{i=this.getLinkOrThrow(t,"lstat")}catch(t){if(t.code!==ct||o)throw t;return}return r.default.build(i.getNode(),e)}lstatSync(t,e){const{throwIfNoEntry:r=!0,bigint:o=!1}=(0,F.getStatOptions)(e);return this.lstatBase((0,R.pathToFilename)(t),o,r)}lstat(t,e,r){const[{throwIfNoEntry:o=!0,bigint:i=!1},n]=(0,F.getStatOptsAndCb)(e,r);this.wrapAsync(this.lstatBase,[(0,R.pathToFilename)(t),i,o],n)}statBase(t,e=!1,o=!0){let i;try{i=this.getResolvedLinkOrThrow(t,"stat")}catch(t){if(t.code!==ct||o)throw t;return}return r.default.build(i.getNode(),e)}statSync(t,e){const{bigint:r=!0,throwIfNoEntry:o=!0}=(0,F.getStatOptions)(e);return this.statBase((0,R.pathToFilename)(t),r,o)}stat(t,e,r){const[{bigint:o=!1,throwIfNoEntry:i=!0},n]=(0,F.getStatOptsAndCb)(e,r);this.wrapAsync(this.statBase,[(0,R.pathToFilename)(t),o,i],n)}fstatBase(t,e=!1){const o=this.getFileByFd(t);if(!o)throw(0,R.createError)(ut,"fstat");return r.default.build(o.node,e)}fstatSync(t,e){return this.fstatBase(t,(0,F.getStatOptions)(e).bigint)}fstat(t,e,r){const[o,i]=(0,F.getStatOptsAndCb)(e,r);this.wrapAsync(this.fstatBase,[t,o.bigint],i)}renameBase(e,r){let o,i;try{o=this.getResolvedLinkOrThrow(e)}catch(t){throw t.code&&(t=(0,R.createError)(t.code,"rename",e,r)),t}try{i=this.getLinkParentAsDirOrThrow(r)}catch(t){throw t.code&&(t=(0,R.createError)(t.code,"rename",e,r)),t}const n=o.parent,s=n.getNode(),a=i.getNode();if(!(s.canExecute()&&s.canWrite()&&a.canExecute()&&a.canWrite()))throw(0,R.createError)(ft,"rename",e,r);n.deleteChild(o);const p=t.basename(r);o.name=p,o.steps=[...i.steps,p],i.setChild(o.getName(),o)}renameSync(t,e){const r=(0,R.pathToFilename)(t),o=(0,R.pathToFilename)(e);this.renameBase(r,o)}rename(t,e,r){const o=(0,R.pathToFilename)(t),i=(0,R.pathToFilename)(e);this.wrapAsync(this.renameBase,[o,i],r)}existsBase(t){return!!this.statBase(t)}existsSync(t){try{return this.existsBase((0,R.pathToFilename)(t))}catch(t){return!1}}exists(t,e){const r=(0,R.pathToFilename)(t);if("function"!=typeof e)throw Error(S.ERRSTR.CB);(0,c.default)((()=>{try{e(this.existsBase(r))}catch(t){e(!1)}}))}accessBase(t,e){this.getLinkOrThrow(t,"access")}accessSync(t,e=J){const r=(0,R.pathToFilename)(t);e|=0,this.accessBase(r,e)}access(t,e,r){let o,i=J;"function"!=typeof e?(i=0|e,o=(0,R.validateCallback)(r)):o=e;const n=(0,R.pathToFilename)(t);this.wrapAsync(this.accessBase,[n,i],o)}appendFileSync(t,e,r){const o=(0,F.getAppendFileOpts)(r);o.flag&&!(0,R.isFd)(t)||(o.flag="a"),this.writeFileSync(t,e,o)}appendFile(t,e,r,o){const[i,n]=(0,F.getAppendFileOptsAndCb)(r,o);i.flag&&!(0,R.isFd)(t)||(i.flag="a"),this.writeFile(t,e,i,n)}readdirBase(e,r){gt(e);const i=this.getResolvedLinkOrThrow(e,"scandir"),n=i.getNode();if(!n.isDirectory())throw(0,R.createError)(lt,"scandir",e);if(!n.canRead())throw(0,R.createError)(ft,"scandir",e);const s=[];for(const t of i.children.keys()){const e=i.getChild(t);if(e&&"."!==t&&".."!==t&&(s.push(o.default.build(e,r.encoding)),r.recursive&&e.children.size)){const t=Object.assign(Object.assign({},r),{recursive:!0,withFileTypes:!0}),o=this.readdirBase(e.getPath(),t);s.push(...o)}}if(R.isWin||"buffer"===r.encoding||s.sort(((t,e)=>t.name<e.name?-1:t.name>e.name?1:0)),r.withFileTypes)return s;let a=e;return R.isWin&&(a=a.replace(/\\/g,"/")),s.map((e=>{if(r.recursive){let r=t.join(e.parentPath,e.name.toString());return R.isWin&&(r=r.replace(/\\/g,"/")),r.replace(a+t.posix.sep,"")}return e.name}))}readdirSync(t,e){const r=(0,F.getReaddirOptions)(e),o=(0,R.pathToFilename)(t);return this.readdirBase(o,r)}readdir(t,e,r){const[o,i]=(0,F.getReaddirOptsAndCb)(e,r),n=(0,R.pathToFilename)(t);this.wrapAsync(this.readdirBase,[n,o],i)}readlinkBase(t,e){const r=this.getLinkOrThrow(t,"readlink").getNode();if(!r.isSymlink())throw(0,R.createError)("EINVAL","readlink",t);const o=et+r.symlink.join(et);return(0,m.strToEncoding)(o,e)}readlinkSync(t,e){const r=(0,F.getDefaultOpts)(e),o=(0,R.pathToFilename)(t);return this.readlinkBase(o,r.encoding)}readlink(t,e,r){const[o,i]=(0,F.getDefaultOptsAndCb)(e,r),n=(0,R.pathToFilename)(t);this.wrapAsync(this.readlinkBase,[n,o.encoding],i)}fsyncBase(t){this.getFileByFdOrThrow(t,"fsync")}fsyncSync(t){this.fsyncBase(t)}fsync(t,e){this.wrapAsync(this.fsyncBase,[t],e)}fdatasyncBase(t){this.getFileByFdOrThrow(t,"fdatasync")}fdatasyncSync(t){this.fdatasyncBase(t)}fdatasync(t,e){this.wrapAsync(this.fdatasyncBase,[t],e)}ftruncateBase(t,e){this.getFileByFdOrThrow(t,"ftruncate").truncate(e)}ftruncateSync(t,e){this.ftruncateBase(t,e)}ftruncate(t,e,r){const o="number"==typeof e?e:0,i=(0,R.validateCallback)("number"==typeof e?r:e);this.wrapAsync(this.ftruncateBase,[t,o],i)}truncateBase(t,e){const r=this.openSync(t,"r+");try{this.ftruncateSync(r,e)}finally{this.closeSync(r)}}truncateSync(t,e){if((0,R.isFd)(t))return this.ftruncateSync(t,e);this.truncateBase(t,e)}truncate(t,e,r){const o="number"==typeof e?e:0,i=(0,R.validateCallback)("number"==typeof e?r:e);if((0,R.isFd)(t))return this.ftruncate(t,o,i);this.wrapAsync(this.truncateBase,[t,o],i)}futimesBase(t,e,r){const o=this.getFileByFdOrThrow(t,"futimes").node;o.atime=new Date(1e3*e),o.mtime=new Date(1e3*r)}futimesSync(t,e,r){this.futimesBase(t,mt(e),mt(r))}futimes(t,e,r,o){this.wrapAsync(this.futimesBase,[t,mt(e),mt(r)],o)}utimesBase(t,e,r,o=!0){const i=(o?this.getResolvedLinkOrThrow(t,"utimes"):this.getLinkOrThrow(t,"lutimes")).getNode();i.atime=new Date(1e3*e),i.mtime=new Date(1e3*r)}utimesSync(t,e,r){this.utimesBase((0,R.pathToFilename)(t),mt(e),mt(r),!0)}utimes(t,e,r,o){this.wrapAsync(this.utimesBase,[(0,R.pathToFilename)(t),mt(e),mt(r),!0],o)}lutimesSync(t,e,r){this.utimesBase((0,R.pathToFilename)(t),mt(e),mt(r),!1)}lutimes(t,e,r,o){this.wrapAsync(this.utimesBase,[(0,R.pathToFilename)(t),mt(e),mt(r),!1],o)}mkdirBase(t,e){const r=gt(t);if(!r.length)throw(0,R.createError)(ht,"mkdir",t);const o=this.getLinkParentAsDirOrThrow(t,"mkdir"),i=r[r.length-1];if(o.getChild(i))throw(0,R.createError)(ht,"mkdir",t);const n=o.getNode();if(!n.canWrite()||!n.canExecute())throw(0,R.createError)(ft,"mkdir",t);o.createChild(i,this.createNode(!0,e))}mkdirpBase(t,e){let r=!1;const o=gt(t);let i=null,n=o.length;for(n=o.length;n>=0&&(i=this.getResolvedLink(o.slice(0,n)),!i);n--);for(i||(i=this.root,n=0),i=this.getResolvedLinkOrThrow(et+o.slice(0,n).join(et),"mkdir");n<o.length;n++){const s=i.getNode();if(!s.isDirectory())throw(0,R.createError)(lt,"mkdir",t);if(!s.canExecute()||!s.canWrite())throw(0,R.createError)(ft,"mkdir",t);r=!0,i=i.createChild(o[n],this.createNode(!0,e))}return r?t:void 0}mkdirSync(t,e){const r=(0,F.getMkdirOptions)(e),o=(0,R.modeToNumber)(r.mode,511),i=(0,R.pathToFilename)(t);if(r.recursive)return this.mkdirpBase(i,o);this.mkdirBase(i,o)}mkdir(t,e,r){const o=(0,F.getMkdirOptions)(e),i=(0,R.validateCallback)("function"==typeof e?e:r),n=(0,R.modeToNumber)(o.mode,511),s=(0,R.pathToFilename)(t);o.recursive?this.wrapAsync(this.mkdirpBase,[s,n],i):this.wrapAsync(this.mkdirBase,[s,n],i)}mkdtempBase(t,e,r=5){const o=t+(0,R.genRndStr6)();try{return this.mkdirBase(o,511),(0,m.strToEncoding)(o,e)}catch(o){if(o.code===ht){if(r>1)return this.mkdtempBase(t,e,r-1);throw Error("Could not create temp dir.")}throw o}}mkdtempSync(t,e){const{encoding:r}=(0,F.getDefaultOpts)(e);if(!t||"string"!=typeof t)throw new TypeError("filename prefix is required");return(0,R.nullCheck)(t),this.mkdtempBase(t,r)}mkdtemp(t,e,r){const[{encoding:o},i]=(0,F.getDefaultOptsAndCb)(e,r);if(!t||"string"!=typeof t)throw new TypeError("filename prefix is required");(0,R.nullCheck)(t)&&this.wrapAsync(this.mkdtempBase,[t,o],i)}rmdirBase(t,e){const r=(0,F.getRmdirOptions)(e),o=this.getLinkAsDirOrThrow(t,"rmdir");if(o.length&&!r.recursive)throw(0,R.createError)("ENOTEMPTY","rmdir",t);this.deleteLink(o)}rmdirSync(t,e){this.rmdirBase((0,R.pathToFilename)(t),e)}rmdir(t,e,r){const o=(0,F.getRmdirOptions)(e),i=(0,R.validateCallback)("function"==typeof e?e:r);this.wrapAsync(this.rmdirBase,[(0,R.pathToFilename)(t),o],i)}rmBase(t,e={}){let r;try{r=this.getResolvedLinkOrThrow(t,"stat")}catch(t){if(t.code===ct&&e.force)return;throw t}if(r.getNode().isDirectory()&&!e.recursive)throw(0,R.createError)("ERR_FS_EISDIR","rm",t);if(!r.parent.getNode().canWrite())throw(0,R.createError)(ft,"rm",t);this.deleteLink(r)}rmSync(t,e){this.rmBase((0,R.pathToFilename)(t),e)}rm(t,e,r){const[o,i]=(0,F.getRmOptsAndCb)(e,r);this.wrapAsync(this.rmBase,[(0,R.pathToFilename)(t),o],i)}fchmodBase(t,e){this.getFileByFdOrThrow(t,"fchmod").chmod(e)}fchmodSync(t,e){this.fchmodBase(t,(0,R.modeToNumber)(e))}fchmod(t,e,r){this.wrapAsync(this.fchmodBase,[t,(0,R.modeToNumber)(e)],r)}chmodBase(t,e,r=!0){(r?this.getResolvedLinkOrThrow(t,"chmod"):this.getLinkOrThrow(t,"chmod")).getNode().chmod(e)}chmodSync(t,e){const r=(0,R.modeToNumber)(e),o=(0,R.pathToFilename)(t);this.chmodBase(o,r,!0)}chmod(t,e,r){const o=(0,R.modeToNumber)(e),i=(0,R.pathToFilename)(t);this.wrapAsync(this.chmodBase,[i,o],r)}lchmodBase(t,e){this.chmodBase(t,e,!1)}lchmodSync(t,e){const r=(0,R.modeToNumber)(e),o=(0,R.pathToFilename)(t);this.lchmodBase(o,r)}lchmod(t,e,r){const o=(0,R.modeToNumber)(e),i=(0,R.pathToFilename)(t);this.wrapAsync(this.lchmodBase,[i,o],r)}fchownBase(t,e,r){this.getFileByFdOrThrow(t,"fchown").chown(e,r)}fchownSync(t,e,r){bt(e),vt(r),this.fchownBase(t,e,r)}fchown(t,e,r,o){bt(e),vt(r),this.wrapAsync(this.fchownBase,[t,e,r],o)}chownBase(t,e,r){this.getResolvedLinkOrThrow(t,"chown").getNode().chown(e,r)}chownSync(t,e,r){bt(e),vt(r),this.chownBase((0,R.pathToFilename)(t),e,r)}chown(t,e,r,o){bt(e),vt(r),this.wrapAsync(this.chownBase,[(0,R.pathToFilename)(t),e,r],o)}lchownBase(t,e,r){this.getLinkOrThrow(t,"lchown").getNode().chown(e,r)}lchownSync(t,e,r){bt(e),vt(r),this.lchownBase((0,R.pathToFilename)(t),e,r)}lchown(t,e,r,o){bt(e),vt(r),this.wrapAsync(this.lchownBase,[(0,R.pathToFilename)(t),e,r],o)}watchFile(t,e,r){const o=(0,R.pathToFilename)(t);let i=e,n=r;if("function"==typeof i&&(n=e,i=null),"function"!=typeof n)throw Error('"watchFile()" requires a listener function');let s=5007,a=!0;i&&"object"==typeof i&&("number"==typeof i.interval&&(s=i.interval),"boolean"==typeof i.persistent&&(a=i.persistent));let p=this.statWatchers[o];return p||(p=new this.StatWatcher,p.start(o,a,s),this.statWatchers[o]=p),p.addListener("change",n),p}unwatchFile(t,e){const r=(0,R.pathToFilename)(t),o=this.statWatchers[r];o&&("function"==typeof e?o.removeListener("change",e):o.removeAllListeners("change"),0===o.listenerCount("change")&&(o.stop(),delete this.statWatchers[r]))}createReadStream(t,e){return new this.ReadStream(t,e)}createWriteStream(t,e){return new this.WriteStream(t,e)}watch(t,e,r){const o=(0,R.pathToFilename)(t);let i=e;"function"==typeof e&&(r=e,i=null);let{persistent:n,recursive:s,encoding:a}=(0,F.getDefaultOpts)(i);void 0===n&&(n=!0),void 0===s&&(s=!1);const p=new this.FSWatcher;return p.start(o,n,s,a),r&&p.addListener("change",r),p}opendirBase(t,e){const r=this.getResolvedLinkOrThrow(t,"scandir");if(!r.getNode().isDirectory())throw(0,R.createError)(lt,"scandir",t);return new T.Dir(r,e)}opendirSync(t,e){const r=(0,F.getOpendirOptions)(e),o=(0,R.pathToFilename)(t);return this.opendirBase(o,r)}opendir(t,e,r){const[o,i]=(0,F.getOpendirOptsAndCb)(e,r),n=(0,R.pathToFilename)(t);this.wrapAsync(this.opendirBase,[n,o],i)}}function St(t){t.emit("stop")}M.Volume=_t,_t.fd=2147483647;class Et extends g.EventEmitter{constructor(t){super(),this.onInterval=()=>{try{const t=this.vol.statSync(this.filename);this.hasChanged(t)&&(this.emit("change",t,this.prev),this.prev=t)}finally{this.loop()}},this.vol=t}loop(){this.timeoutRef=this.setTimeout(this.onInterval,this.interval)}hasChanged(t){return t.mtimeMs>this.prev.mtimeMs||t.nlink!==this.prev.nlink}start(t,e=!0,r=5007){this.filename=(0,R.pathToFilename)(t),this.setTimeout=e?setTimeout.bind("undefined"!=typeof globalThis?globalThis:y):l.default,this.interval=r,this.prev=this.vol.statSync(this.filename),this.loop()}stop(){clearTimeout(this.timeoutRef),(0,u.default)((()=>{St.call(this,this)}))}}var Ot;function Ft(t,e,r){if(!(this instanceof Ft))return new Ft(t,e,r);if(this._vol=t,void 0===(r=Object.assign({},(0,F.getOptions)(r,{}))).highWaterMark&&(r.highWaterMark=65536),f.Readable.call(this,r),this.path=(0,R.pathToFilename)(e),this.fd=void 0===r.fd?null:r.fd,this.flags=void 0===r.flags?"r":r.flags,this.mode=void 0===r.mode?438:r.mode,this.start=r.start,this.end=r.end,this.autoClose=void 0===r.autoClose||r.autoClose,this.pos=void 0,this.bytesRead=0,void 0!==this.start){if("number"!=typeof this.start)throw new TypeError('"start" option must be a Number');if(void 0===this.end)this.end=1/0;else if("number"!=typeof this.end)throw new TypeError('"end" option must be a Number');if(this.start>this.end)throw new Error('"start" option must be <= "end" option');this.pos=this.start}"number"!=typeof this.fd&&this.open(),this.on("end",(function(){this.autoClose&&this.destroy&&this.destroy()}))}function Rt(t){this.close()}function Tt(t,e,r){if(!(this instanceof Tt))return new Tt(t,e,r);if(this._vol=t,r=Object.assign({},(0,F.getOptions)(r,{})),f.Writable.call(this,r),this.path=(0,R.pathToFilename)(e),this.fd=void 0===r.fd?null:r.fd,this.flags=void 0===r.flags?"w":r.flags,this.mode=void 0===r.mode?438:r.mode,this.start=r.start,this.autoClose=void 0===r.autoClose||!!r.autoClose,this.pos=void 0,this.bytesWritten=0,this.pending=!0,void 0!==this.start){if("number"!=typeof this.start)throw new TypeError('"start" option must be a Number');if(this.start<0)throw new Error('"start" must be >= zero');this.pos=this.start}r.encoding&&this.setDefaultEncoding(r.encoding),"number"!=typeof this.fd&&this.open(),this.once("finish",(function(){this.autoClose&&this.close()}))}M.StatWatcher=Et,v.inherits(Ft,f.Readable),M.ReadStream=Ft,Ft.prototype.open=function(){var t=this;this._vol.open(this.path,this.flags,this.mode,((e,r)=>{if(e)return t.autoClose&&t.destroy&&t.destroy(),void t.emit("error",e);t.fd=r,t.emit("open",r),t.read()}))},Ft.prototype._read=function(t){if("number"!=typeof this.fd)return this.once("open",(function(){this._read(t)}));if(!this.destroyed){var e;(!Ot||Ot.length-Ot.used<128)&&(e=this._readableState.highWaterMark,(Ot=(0,p.bufferAllocUnsafe)(e)).used=0);var r=Ot,o=Math.min(Ot.length-Ot.used,t),i=Ot.used;if(void 0!==this.pos&&(o=Math.min(this.end-this.pos+1,o)),o<=0)return this.push(null);var n=this;this._vol.read(this.fd,Ot,Ot.used,o,this.pos,(function(t,e){if(t)n.autoClose&&n.destroy&&n.destroy(),n.emit("error",t);else{var o=null;e>0&&(n.bytesRead+=e,o=r.slice(i,i+e)),n.push(o)}})),void 0!==this.pos&&(this.pos+=o),Ot.used+=o}},Ft.prototype._destroy=function(t,e){this.close((r=>{e(t||r)}))},Ft.prototype.close=function(t){var e;if(t&&this.once("close",t),this.closed||"number"!=typeof this.fd)return"number"!=typeof this.fd?void this.once("open",Rt):(0,u.default)((()=>this.emit("close")));"boolean"==typeof(null===(e=this._readableState)||void 0===e?void 0:e.closed)?this._readableState.closed=!0:this.closed=!0,this._vol.close(this.fd,(t=>{t?this.emit("error",t):this.emit("close")})),this.fd=null},v.inherits(Tt,f.Writable),M.WriteStream=Tt,Tt.prototype.open=function(){this._vol.open(this.path,this.flags,this.mode,function(t,e){if(t)return this.autoClose&&this.destroy&&this.destroy(),void this.emit("error",t);this.fd=e,this.pending=!1,this.emit("open",e)}.bind(this))},Tt.prototype._write=function(t,e,r){if(!(t instanceof p.Buffer||t instanceof Uint8Array))return this.emit("error",new Error("Invalid data"));if("number"!=typeof this.fd)return this.once("open",(function(){this._write(t,e,r)}));var o=this;this._vol.write(this.fd,t,0,t.length,this.pos,((t,e)=>{if(t)return o.autoClose&&o.destroy&&o.destroy(),r(t);o.bytesWritten+=e,r()})),void 0!==this.pos&&(this.pos+=t.length)},Tt.prototype._writev=function(t,e){if("number"!=typeof this.fd)return this.once("open",(function(){this._writev(t,e)}));const r=this,o=t.length,i=new Array(o);for(var n=0,s=0;s<o;s++){var a=t[s].chunk;i[s]=a,n+=a.length}const c=p.Buffer.concat(i);this._vol.write(this.fd,c,0,c.length,this.pos,((t,o)=>{if(t)return r.destroy&&r.destroy(),e(t);r.bytesWritten+=o,e()})),void 0!==this.pos&&(this.pos+=n)},Tt.prototype.close=function(t){var e;if(t&&this.once("close",t),this.closed||"number"!=typeof this.fd)return"number"!=typeof this.fd?void this.once("open",Rt):(0,u.default)((()=>this.emit("close")));"boolean"==typeof(null===(e=this._writableState)||void 0===e?void 0:e.closed)?this._writableState.closed=!0:this.closed=!0,this._vol.close(this.fd,(t=>{t?this.emit("error",t):this.emit("close")})),this.fd=null},Tt.prototype._destroy=Ft.prototype._destroy,Tt.prototype.destroySoon=Tt.prototype.end;class kt extends g.EventEmitter{constructor(t){super(),this._filename="",this._filenameEncoded="",this._recursive=!1,this._encoding=m.ENCODING_UTF8,this._listenerRemovers=new Map,this._onParentChild=t=>{t.getName()===this._getName()&&this._emit("rename")},this._emit=t=>{this.emit("change",t,this._filenameEncoded)},this._persist=()=>{this._timer=setTimeout(this._persist,1e6)},this._vol=t}_getName(){return this._steps[this._steps.length-1]}start(t,e=!0,r=!1,o=m.ENCODING_UTF8){this._filename=(0,R.pathToFilename)(t),this._steps=gt(this._filename),this._filenameEncoded=(0,m.strToEncoding)(this._filename),this._recursive=r,this._encoding=o;try{this._link=this._vol.getLinkOrThrow(this._filename,"FSWatcher")}catch(t){const e=new Error(`watch ${this._filename} ${t.code}`);throw e.code=t.code,e.errno=t.code,e}const i=t=>{var e;const r=t.getPath(),o=t.getNode(),i=()=>{let t=st(this._filename,r);return t||(t=this._getName()),this.emit("change","change",t)};o.on("change",i);const n=null!==(e=this._listenerRemovers.get(o.ino))&&void 0!==e?e:[];n.push((()=>o.removeListener("change",i))),this._listenerRemovers.set(o.ino,n)},n=t=>{var e;const o=t.getNode(),s=t=>{this.emit("change","rename",st(this._filename,t.getPath())),setTimeout((()=>{i(t),n(t)}))},a=t=>{const e=t=>{const r=t.getNode().ino,o=this._listenerRemovers.get(r);o&&(o.forEach((t=>t())),this._listenerRemovers.delete(r));for(const[r,o]of t.children.entries())o&&"."!==r&&".."!==r&&e(o)};e(t),this.emit("change","rename",st(this._filename,t.getPath()))};for(const[e,r]of t.children.entries())r&&"."!==e&&".."!==e&&i(r);t.on("child:add",s),t.on("child:delete",a);if((null!==(e=this._listenerRemovers.get(o.ino))&&void 0!==e?e:[]).push((()=>{t.removeListener("child:add",s),t.removeListener("child:delete",a)})),r)for(const[e,r]of t.children.entries())r&&"."!==e&&".."!==e&&n(r)};i(this._link),n(this._link);const s=this._link.parent;s&&(s.setMaxListeners(s.getMaxListeners()+1),s.on("child:delete",this._onParentChild)),e&&this._persist()}close(){clearTimeout(this._timer),this._listenerRemovers.forEach((t=>{t.forEach((t=>t()))})),this._listenerRemovers.clear();const t=this._link.parent;t&&t.removeListener("child:delete",this._onParentChild)}}return M.FSWatcher=kt,M}var pe,ce={};var ue,he,le={};var fe=(he||(he=1,function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.memfs=e.fs=e.vol=e.Volume=void 0,e.createFsFromVolume=l;const r=O(),o=j(),i=ae(),n=E(),s=(pe||(pe=1,Object.defineProperty(ce,"__esModule",{value:!0}),ce.fsSynchronousApiList=void 0,ce.fsSynchronousApiList=["accessSync","appendFileSync","chmodSync","chownSync","closeSync","copyFileSync","existsSync","fchmodSync","fchownSync","fdatasyncSync","fstatSync","fsyncSync","ftruncateSync","futimesSync","lchmodSync","lchownSync","linkSync","lstatSync","mkdirSync","mkdtempSync","openSync","readdirSync","readFileSync","readlinkSync","readSync","readvSync","realpathSync","renameSync","rmdirSync","rmSync","statSync","symlinkSync","truncateSync","unlinkSync","utimesSync","lutimesSync","writeFileSync","writeSync","writevSync"]),ce),a=(ue||(ue=1,Object.defineProperty(le,"__esModule",{value:!0}),le.fsCallbackApiList=void 0,le.fsCallbackApiList=["access","appendFile","chmod","chown","close","copyFile","createReadStream","createWriteStream","exists","fchmod","fchown","fdatasync","fstat","fsync","ftruncate","futimes","lchmod","lchown","link","lstat","mkdir","mkdtemp","open","read","readv","readdir","readFile","readlink","realpath","rename","rm","rmdir","stat","symlink","truncate","unlink","unwatchFile","utimes","lutimes","watch","watchFile","write","writev","writeFile"]),le),{F_OK:p,R_OK:c,W_OK:u,X_OK:h}=n.constants;function l(t){const e={F_OK:p,R_OK:c,W_OK:u,X_OK:h,constants:n.constants,Stats:r.default,Dirent:o.default};for(const r of s.fsSynchronousApiList)"function"==typeof t[r]&&(e[r]=t[r].bind(t));for(const r of a.fsCallbackApiList)"function"==typeof t[r]&&(e[r]=t[r].bind(t));return e.StatWatcher=t.StatWatcher,e.FSWatcher=t.FSWatcher,e.WriteStream=t.WriteStream,e.ReadStream=t.ReadStream,e.promises=t.promises,e._toUnixTimestamp=i.toUnixTimestamp,e.__vol=t,e}e.Volume=i.Volume,e.vol=new i.Volume,e.fs=l(e.vol),e.memfs=(t={},r="/")=>{const o=e.Volume.fromNestedJSON(t,r);return{fs:l(o),vol:o}},t.exports=Object.assign(Object.assign({},t.exports),e.fs),t.exports.semantic=!0}(w,w.exports)),w.exports);class de extends t.NodeJSFileSystem{removeFile(t){throw new Error("Not implemented.")}symlink(t,e){throw new Error("Not implemented.")}copyFile(t,e){throw new Error("Not implemented.")}moveFile(t,e){throw new Error("Not implemented.")}chdir(t){throw new Error("Not implemented.")}removeDeep(){throw new Error("Not implemented")}}const ye=n.join(process.cwd(),"../../../"),ge=process.argv.includes("--vanilla-ts"),me="1"===process.env.DEBUG_WORKER;let be=0;class ve extends de{id=be++;_vol=new fe.Volume;_diskCwdSysPath=process.cwd();_virtualCwd=this.normalizePathFragmentToPosix(`/${n.relative(ye,this._diskCwdSysPath)}`);constructor(t){super();for(const e of t)this.addFile(e)}resolve(...t){return u.resolve(this._virtualCwd,...t)}pwd(){return this._virtualCwd}readdir(t){return this._vol.readdirSync(t)}stat(t){return this._vol.statSync(t)}lstat(t){return this._vol.lstatSync(t)}addFile(t){if(this.exists(t))return;const e=u.dirname(t);this._vol.mkdirSync(e,{recursive:!0});const r=this.diskLstat(t);if(r?.isSymbolicLink()){const e=this.diskReadlink(t);this.addFile(e),this._vol.symlinkSync(e,t)}else r?.isDirectory()?this._vol.mkdirSync(t):this._vol.writeFileSync(t,"@@READ--FROM-DISK@@",{encoding:"utf8"})}readFile(t){return c.readFileSync(this.toDiskPath(t),{encoding:"utf8"})}writeFile(t,e,r){c.writeFileSync(this.toDiskPath(t),e,r?{flag:"wx"}:void 0)}ensureDir(t){c.mkdirSync(this.toDiskPath(t),{recursive:!0})}exists(t){return this._vol.existsSync(t)}realpath(t){return this._vol.realpathSync(this.resolve(t),{encoding:"utf8"})}diskLstat(t){try{return c.lstatSync(this.toDiskPath(t))}catch{return null}}diskReadlink(t){return this.fromDiskPath(c.readlinkSync(this.toDiskPath(t)))}toDiskPath(t){return n.resolve(n.join(ye,this.resolve(t)))}fromDiskPath(t){const e=n.relative(ye,t),r=this.normalizePathFragmentToPosix(e);if(r.startsWith(".."))throw new Error(`Unexpected disk path that cannot be part of execroot: ${t}`);return`/${r}`}normalizePathFragmentToPosix(t){return t.replace(/\\/g,"/")}}const we=/\.(css|html)$/;function _e(t){return we.test(t)}class Se{program;lastInputs;constructor(t,e){this.program=t,this.lastInputs=e}}class Ee{rootNames;options;host;oldProgram;constructor(t,e,r,o){this.rootNames=t,this.options=e,this.host=r,this.oldProgram=o}}class Oe extends Ee{_ngtscProgram=null;async init(){this._ngtscProgram=new t.NgtscProgram(this.rootNames,this.options,this.host,this.oldProgram instanceof Oe?this.oldProgram._ngtscProgram??void 0:void 0),await this._ngtscProgram.loadNgStructureAsync()}getPreEmitDiagnostics(t){return o(this._ngtscProgram,"Expected ngtsc program to be initialized."),[...this._ngtscProgram.getTsSyntacticDiagnostics(void 0,t),...this._ngtscProgram.getTsSemanticDiagnostics(void 0,t),...this._ngtscProgram.getTsProgram().getGlobalDiagnostics(t),...this._ngtscProgram.getNgStructuralDiagnostics(t),...this._ngtscProgram.getNgSemanticDiagnostics(void 0,t)]}emit(t){return o(this._ngtscProgram,"Expected ngtsc program to be initialized."),this._ngtscProgram.emit({cancellationToken:t,forceEmit:!0})}isStructureReused(){return o(this._ngtscProgram,"Expected ngtsc program to be initialized."),(this._ngtscProgram?.getTsProgram()).structureIsReused}}class Fe extends Ee{_tsProgram=null;async init(){this._tsProgram=e.createProgram({rootNames:this.rootNames,options:this.options,host:this.host,oldProgram:this.oldProgram instanceof Fe?this.oldProgram._tsProgram??void 0:void 0})}getPreEmitDiagnostics(t){return o(this._tsProgram,"Expected TS program to be initialized."),[...this._tsProgram.getSyntacticDiagnostics(void 0,t),...this._tsProgram.getSemanticDiagnostics(void 0,t),...this._tsProgram.getGlobalDiagnostics(t)]}emit(t){return o(this._tsProgram,"Expected TS program to be initialized."),this._tsProgram.emit(void 0,void 0,t,!1,void 0)}isStructureReused(){return o(this._tsProgram,"Expected ngtsc program to be initialized."),this._tsProgram.structureIsReused}}var Re;!function(t){t[t.Not=0]="Not",t[t.SafeModules=1]="SafeModules",t[t.Completely=2]="Completely"}(Re||(Re={}));let Te=0;async function ke(r,i){const n=`${r[r.indexOf("--project")+1]} @ ${r[r.lastIndexOf("--outDir")+1]} @ ${r[r.lastIndexOf("--declarationDir")+1]} @ ${r[r.lastIndexOf("--rootDir")+1]}`,s=i?.programCache.get(n);let a=null;null!==i&&(a=new Map(i.req.inputs.map((t=>[`/${t.path}`,t.digest])))),console.error(r);const p=e.parseCommandLine(r),c=null!==a?new ve(Array.from(a.keys())):new t.NodeJSFileSystem;t.setFileSystem(c);const u=void 0!==s&&null!==a?function(t,e){const r=new Set;for(const[o,i]of t.entries()){if(!_e(o))continue;const t=e.get(o);void 0!==t&&d(i,t)&&e.has(o)||r.add(o)}for(const o of e.keys())_e(o)&&(t.has(o)||r.add(o));return r}(a,s.lastInputs):null;null!==i&&(o(a,"Expected inputs when using persistent file cache."),i.fileCache.updateCache(a));const l=t.readConfiguration(p.options.project,p.options,c),f=l.options,y={getCanonicalFileName:t=>t,getCurrentDirectory:()=>c.pwd(),getNewLine:()=>"\n"};if(l.errors.length)return console.error("Config parsing errors:\n"),console.error(e.formatDiagnosticsWithColorAndContext(l.errors,y)),1;let g;g=null!==i?function(r,o,i,n){const s=new t.NgtscCompilerHost(i,r),a=s.getSourceFile,p=s.getDefaultLibLocation?.();if(void 0===p)throw new Error("Could not determine default TypeScript lib location.");return null!==n&&(s.getModifiedResourceFiles=()=>n),s.readResource=t=>{const e=o.getCache(t);if(void 0!==e&&"string"==typeof e)return e;const r=i.readFile(i.resolve(t));if(void 0===r)throw new Error(`Could not read resource file: ${t}`);const n=o.getLastDigest(t);if(void 0===n)throw new Error(`No digest found for resource file: ${t}`);return o.putCache(t,{digest:n,value:r}),r},s.getSourceFile=function(t,r,i,n){const s=o.getCache(t);if(void 0!==s&&"string"!=typeof s)return s;const c=void 0!==p&&t.startsWith(p);let u;if(u=c?e.createSourceFile(t,h.readFileSync(t,"utf8"),r,!1):a.call(this,t,r,i,n),void 0!==u){const e=c?new Uint8Array:o.getLastDigest(t);if(void 0===e)throw new Error(`No digest found for source file: ${t}`);o.putCache(t,{digest:e,value:u})}return u},s}(f,i.fileCache,c,u):new t.NgtscCompilerHost(c,f);const m=new(ge?Fe:Oe)(l.rootNames,f,g,s?.program);null!==a&&(void 0!==s?(s.program=m,s.lastInputs=a):i?.programCache.set(n,new Se(m,a)));const b=null!==i?(v=i.req.signal,{isCancellationRequested:()=>v.aborted,throwIfCancellationRequested:()=>{if(v.aborted)throw new Error(v.reason)}}):void 0;var v;await m.init(),me&&(console.error("Worker re-use, number of previous runs: "+Te++),console.error(`Re-using program & host: ${!!s}`),console.error(`Vanilla TS: ${ge}`),console.error(`Modified resources: ${u?.size}`),console.error("Structure reused",Re[m.isStructureReused()]));const w=m.getPreEmitDiagnostics(b);if(0!==w.length)return console.error("Pre-emit diagnostics:\n"),console.error(e.formatDiagnosticsWithColorAndContext(w,y)),1;const _=m.emit(b);return 0!==_.diagnostics.length?(console.error("Emit diagnostics:\n"),console.error(e.formatDiagnosticsWithColorAndContext(_.diagnostics,y)),1):_.emitSkipped?1:0}var Ae,Pe={};var Ne=g(function(){if(Ae)return Pe;Ae=1,Object.defineProperty(Pe,"__esModule",{value:!0});var t=a,e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},e(t,r)};function r(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function o(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}function o(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,r=t[Symbol.asyncIterator];return r?r.call(t):(t=function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],o=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&o>=t.length&&(t=void 0),{value:t&&t[o++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}(t),e={},o("next"),o("throw"),o("return"),e[Symbol.asyncIterator]=function(){return this},e);function o(r){e[r]=t[r]&&function(e){return new Promise((function(o,i){!function(t,e,r,o){Promise.resolve(o).then((function(e){t({value:e,done:r})}),e)}(o,i,(e=t[r](e)).done,e.value)}))}}}function i(t,e,r,o){if("a"===r&&!o)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?o:"a"===r?o.call(t):o?o.value:e.get(t)}"function"==typeof SuppressedError&&SuppressedError;var n="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==y?y:"undefined"!=typeof self?self:{};!function(){function t(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function e(t,e,r){return e&&function(t,e){for(var r=0;r<e.length;r++){var o=e[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),t}function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&i(t,e)}function o(t){return o=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},o(t)}function i(t,e){return i=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},i(t,e)}function s(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function a(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,i=o(t);if(e){var n=o(this).constructor;r=Reflect.construct(i,arguments,n)}else r=i.apply(this,arguments);return function(t,e){if(e&&("object"==typeof e||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return s(t)}(this,r)}}function p(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=o(t)););return t}function c(){return c="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var o=p(t,e);if(o){var i=Object.getOwnPropertyDescriptor(o,e);return i.get?i.get.call(arguments.length<3?t:r):i.value}},c.apply(this,arguments)}var u=function(){function r(){t(this,r),Object.defineProperty(this,"listeners",{value:{},writable:!0,configurable:!0})}return e(r,[{key:"addEventListener",value:function(t,e,r){t in this.listeners||(this.listeners[t]=[]),this.listeners[t].push({callback:e,options:r})}},{key:"removeEventListener",value:function(t,e){if(t in this.listeners)for(var r=this.listeners[t],o=0,i=r.length;o<i;o++)if(r[o].callback===e)return void r.splice(o,1)}},{key:"dispatchEvent",value:function(t){if(t.type in this.listeners){for(var e=this.listeners[t.type].slice(),r=0,o=e.length;r<o;r++){var i=e[r];try{i.callback.call(this,t)}catch(t){Promise.resolve().then((function(){throw t}))}i.options&&i.options.once&&this.removeEventListener(t.type,i.callback)}return!t.defaultPrevented}}}]),r}(),h=function(i){r(p,i);var n=a(p);function p(){var e;return t(this,p),(e=n.call(this)).listeners||u.call(s(e)),Object.defineProperty(s(e),"aborted",{value:!1,writable:!0,configurable:!0}),Object.defineProperty(s(e),"onabort",{value:null,writable:!0,configurable:!0}),Object.defineProperty(s(e),"reason",{value:void 0,writable:!0,configurable:!0}),e}return e(p,[{key:"toString",value:function(){return"[object AbortSignal]"}},{key:"dispatchEvent",value:function(t){"abort"===t.type&&(this.aborted=!0,"function"==typeof this.onabort&&this.onabort.call(this,t)),c(o(p.prototype),"dispatchEvent",this).call(this,t)}}]),p}(u),l=function(){function r(){t(this,r),Object.defineProperty(this,"signal",{value:new h,writable:!0,configurable:!0})}return e(r,[{key:"abort",value:function(t){var e;try{e=new Event("abort")}catch(t){"undefined"!=typeof document?document.createEvent?(e=document.createEvent("Event")).initEvent("abort",!1,!1):(e=document.createEventObject()).type="abort":e={type:"abort",bubbles:!1,cancelable:!1}}var r=t;if(void 0===r)if("undefined"==typeof document)(r=new Error("This operation was aborted")).name="AbortError";else try{r=new DOMException("signal is aborted without reason")}catch(t){(r=new Error("This operation was aborted")).name="AbortError"}this.signal.reason=r,this.signal.dispatchEvent(e)}},{key:"toString",value:function(){return"[object AbortController]"}}]),r}();"undefined"!=typeof Symbol&&Symbol.toStringTag&&(l.prototype[Symbol.toStringTag]="AbortController",h.prototype[Symbol.toStringTag]="AbortSignal"),function(t){(function(t){return t.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL?(console.log("__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill"),!0):"function"==typeof t.Request&&!t.Request.prototype.hasOwnProperty("signal")||!t.AbortController})(t)&&(t.AbortController=l,t.AbortSignal=h)}("undefined"!=typeof self?self:n)}();var s,p={};return function(t){var e="function"==typeof Object.defineProperties?Object.defineProperty:function(t,e,r){t!=Array.prototype&&t!=Object.prototype&&(t[e]=r.value)},r=n;function o(){o=function(){},r.Symbol||(r.Symbol=a)}function i(t,r){this.a=t,e(this,"description",{configurable:!0,writable:!0,value:r})}i.prototype.toString=function(){return this.a};var s,a=(s=0,function t(e){if(this instanceof t)throw new TypeError("Symbol is not a constructor");return new i("jscomp_symbol_"+(e||"")+"_"+s++,e)});function p(){o();var t=r.Symbol.iterator;t||(t=r.Symbol.iterator=r.Symbol("Symbol.iterator")),"function"!=typeof Array.prototype[t]&&e(Array.prototype,t,{configurable:!0,writable:!0,value:function(){return function(t){return p(),(t={next:t})[r.Symbol.iterator]=function(){return this},t}(function(t){var e=0;return function(){return e<t.length?{done:!1,value:t[e++]}:{done:!0}}}(this))}}),p=function(){}}!function(t,o){if(o){var i=r;t=t.split(".");for(var n=0;n<t.length-1;n++){var s=t[n];s in i||(i[s]={}),i=i[s]}(o=o(n=i[t=t[t.length-1]]))!=n&&null!=o&&e(i,t,{configurable:!0,writable:!0,value:o})}}("Array.prototype.entries",(function(t){return t||function(){return function(t,e){p(),t instanceof String&&(t+="");var r=0,o={next:function(){if(r<t.length){var i=r++;return{value:e(i,t[i]),done:!1}}return o.next=function(){return{done:!0,value:void 0}},o.next()}};return o[Symbol.iterator]=function(){return o},o}(this,(function(t,e){return[t,e]}))}}));var c=n||self;function u(t,e,r){t=t.split("."),r=r||c,t[0]in r||void 0===r.execScript||r.execScript("var "+t[0]);for(var o;t.length&&(o=t.shift());)t.length||void 0===e?r=r[o]&&r[o]!==Object.prototype[o]?r[o]:r[o]={}:r[o]=e}function h(t){var e=typeof t;if("object"==e){if(!t)return"null";if(t instanceof Array)return"array";if(t instanceof Object)return e;var r=Object.prototype.toString.call(t);if("[object Window]"==r)return"object";if("[object Array]"==r||"number"==typeof t.length&&void 0!==t.splice&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("splice"))return"array";if("[object Function]"==r||void 0!==t.call&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("call"))return"function"}else if("function"==e&&void 0===t.call)return"object";return e}function l(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}var f="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" "),d=Array.prototype.forEach?function(t,e){Array.prototype.forEach.call(t,e,void 0)}:function(t,e){for(var r=t.length,o="string"==typeof t?t.split(""):t,i=0;i<r;i++)i in o&&e.call(void 0,o[i],i,t)},y=Array.prototype.map?function(t,e){return Array.prototype.map.call(t,e,void 0)}:function(t,e){for(var r=t.length,o=Array(r),i="string"==typeof t?t.split(""):t,n=0;n<r;n++)n in i&&(o[n]=e.call(void 0,i[n],n,t));return o};function g(t,e,r){return 2>=arguments.length?Array.prototype.slice.call(t,e):Array.prototype.slice.call(t,e,r)}function m(t,e,r,o){var i="Assertion failed";if(r){i+=": "+r;var n=o}else t&&(i+=": "+t,n=e);throw Error(i,n||[])}function b(t,e,r){for(var o=[],i=2;i<arguments.length;++i)o[i-2]=arguments[i];return t||m("",null,e,o),t}function v(t,e){for(var r=[],o=1;o<arguments.length;++o)r[o-1]=arguments[o];throw Error("Failure"+(t?": "+t:""),r)}function w(t,e,r,o){for(var i=[],n=3;n<arguments.length;++n)i[n-3]=arguments[n];t instanceof e||m("Expected instanceof %s but got %s.",[_(e),_(t)],r,i)}function _(t){return t instanceof Function?t.displayName||t.name||"unknown type name":t instanceof Object?t.constructor.displayName||t.constructor.name||Object.prototype.toString.call(t):null===t?"null":typeof t}function S(t,e){if(this.c=t,this.b=e,this.a={},this.arrClean=!0,0<this.c.length){for(t=0;t<this.c.length;t++){var r=(e=this.c[t])[0];this.a[r.toString()]=new R(r,e[1])}this.arrClean=!0}}function E(t){this.a=0,this.b=t}function O(t,e){return t.b?(e.a||(e.a=new t.b(e.value)),e.a):e.value}function F(t){t=t.a;var e,r=[];for(e in t)Object.prototype.hasOwnProperty.call(t,e)&&r.push(e);return r}function R(t,e){this.key=t,this.value=e,this.a=void 0}function T(t){if(8192>=t.length)return String.fromCharCode.apply(null,t);for(var e="",r=0;r<t.length;r+=8192)e+=String.fromCharCode.apply(null,g(t,r,r+8192));return e}u("jspb.Map",S,void 0),S.prototype.g=function(){if(this.arrClean){if(this.b){var t,e=this.a;for(t in e)if(Object.prototype.hasOwnProperty.call(e,t)){var r=e[t].a;r&&r.g()}}}else{for(this.c.length=0,(e=F(this)).sort(),t=0;t<e.length;t++){var o=this.a[e[t]];(r=o.a)&&r.g(),this.c.push([o.key,o.value])}this.arrClean=!0}return this.c},S.prototype.toArray=S.prototype.g,S.prototype.Mc=function(t,e){for(var r=this.g(),o=[],i=0;i<r.length;i++){var n=this.a[r[i][0].toString()];O(this,n);var s=n.a;s?(b(e),o.push([n.key,e(t,s)])):o.push([n.key,n.value])}return o},S.prototype.toObject=S.prototype.Mc,S.fromObject=function(t,e,r){e=new S([],e);for(var o=0;o<t.length;o++){var i=t[o][0],n=r(t[o][1]);e.set(i,n)}return e},E.prototype.next=function(){return this.a<this.b.length?{done:!1,value:this.b[this.a++]}:{done:!0,value:void 0}},"undefined"!=typeof Symbol&&(E.prototype[Symbol.iterator]=function(){return this}),S.prototype.Jb=function(){return F(this).length},S.prototype.getLength=S.prototype.Jb,S.prototype.clear=function(){this.a={},this.arrClean=!1},S.prototype.clear=S.prototype.clear,S.prototype.Cb=function(t){t=t.toString();var e=this.a.hasOwnProperty(t);return delete this.a[t],this.arrClean=!1,e},S.prototype.del=S.prototype.Cb,S.prototype.Eb=function(){var t=[],e=F(this);e.sort();for(var r=0;r<e.length;r++){var o=this.a[e[r]];t.push([o.key,o.value])}return t},S.prototype.getEntryList=S.prototype.Eb,S.prototype.entries=function(){var t=[],e=F(this);e.sort();for(var r=0;r<e.length;r++){var o=this.a[e[r]];t.push([o.key,O(this,o)])}return new E(t)},S.prototype.entries=S.prototype.entries,S.prototype.keys=function(){var t=[],e=F(this);e.sort();for(var r=0;r<e.length;r++)t.push(this.a[e[r]].key);return new E(t)},S.prototype.keys=S.prototype.keys,S.prototype.values=function(){var t=[],e=F(this);e.sort();for(var r=0;r<e.length;r++)t.push(O(this,this.a[e[r]]));return new E(t)},S.prototype.values=S.prototype.values,S.prototype.forEach=function(t,e){var r=F(this);r.sort();for(var o=0;o<r.length;o++){var i=this.a[r[o]];t.call(e,O(this,i),i.key,this)}},S.prototype.forEach=S.prototype.forEach,S.prototype.set=function(t,e){var r=new R(t);return this.b?(r.a=e,r.value=e.g()):r.value=e,this.a[t.toString()]=r,this.arrClean=!1,this},S.prototype.set=S.prototype.set,S.prototype.get=function(t){if(t=this.a[t.toString()])return O(this,t)},S.prototype.get=S.prototype.get,S.prototype.has=function(t){return t.toString()in this.a},S.prototype.has=S.prototype.has,S.prototype.Jc=function(t,e,r,o,i){var n=F(this);n.sort();for(var s=0;s<n.length;s++){var a=this.a[n[s]];e.Va(t),r.call(e,1,a.key),this.b?o.call(e,2,O(this,a),i):o.call(e,2,a.value),e.Ya()}},S.prototype.serializeBinary=S.prototype.Jc,S.deserializeBinary=function(t,e,r,o,i,n,s){for(;e.oa()&&!e.bb();){var a=e.c;1==a?n=r.call(e):2==a&&(t.b?(b(i),s||(s=new t.b),o.call(e,s,i)):s=o.call(e))}b(null!=n),b(null!=s),t.set(n,s)};var k={"\0":"\\0","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\x0B",'"':'\\"',"\\":"\\\\","<":"\\u003C"},A={"'":"\\'"},P={},N=null;function I(t,e){void 0===e&&(e=0),B(),e=P[e];for(var r=[],o=0;o<t.length;o+=3){var i=t[o],n=o+1<t.length,s=n?t[o+1]:0,a=o+2<t.length,p=a?t[o+2]:0,c=i>>2;i=(3&i)<<4|s>>4,s=(15&s)<<2|p>>6,p&=63,a||(p=64,n||(s=64)),r.push(e[c],e[i],e[s]||"",e[p]||"")}return r.join("")}function C(t){var e=t.length,r=3*e/4;r%3?r=Math.floor(r):-1!="=.".indexOf(t[e-1])&&(r=-1!="=.".indexOf(t[e-2])?r-2:r-1);var o=new Uint8Array(r),i=0;return function(t,e){function r(e){for(;o<t.length;){var r=t.charAt(o++),i=N[r];if(null!=i)return i;if(!/^[\s\xa0]*$/.test(r))throw Error("Unknown base64 encoding at char: "+r)}return e}B();for(var o=0;;){var i=r(-1),n=r(0),s=r(64),a=r(64);if(64===a&&-1===i)break;e(i<<2|n>>4),64!=s&&(e(n<<4&240|s>>2),64!=a&&e(s<<6&192|a))}}(t,(function(t){o[i++]=t})),o.subarray(0,i)}function B(){if(!N){N={};for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),e=["+/=","+/","-_=","-_.","-_"],r=0;5>r;r++){var o=t.concat(e[r].split(""));P[r]=o;for(var i=0;i<o.length;i++){var n=o[i];void 0===N[n]&&(N[n]=i)}}}}u("jspb.ConstBinaryMessage",(function(){}),void 0),u("jspb.BinaryMessage",(function(){}),void 0),u("jspb.BinaryConstants.FieldType",{yb:-1,ee:1,FLOAT:2,ke:3,te:4,je:5,xb:6,wb:7,BOOL:8,re:9,ie:10,le:11,ce:12,se:13,ge:14,me:15,ne:16,oe:17,pe:18,he:30,ve:31},void 0),u("jspb.BinaryConstants.WireType",{yb:-1,ue:0,xb:1,de:2,qe:3,fe:4,wb:5},void 0),u("jspb.BinaryConstants.FieldTypeToWireType",(function(t){switch(t){case 5:case 3:case 13:case 4:case 17:case 18:case 8:case 14:case 31:return 0;case 1:case 6:case 16:case 30:return 1;case 9:case 11:case 12:return 2;case 2:case 7:case 15:return 5;default:return-1}}),void 0),u("jspb.BinaryConstants.INVALID_FIELD_NUMBER",-1,void 0),u("jspb.BinaryConstants.FLOAT32_EPS",1401298464324817e-60,void 0),u("jspb.BinaryConstants.FLOAT32_MIN",11754943508222875e-54,void 0),u("jspb.BinaryConstants.FLOAT32_MAX",34028234663852886e22,void 0),u("jspb.BinaryConstants.FLOAT64_EPS",5e-324,void 0),u("jspb.BinaryConstants.FLOAT64_MIN",22250738585072014e-324,void 0),u("jspb.BinaryConstants.FLOAT64_MAX",17976931348623157e292,void 0),u("jspb.BinaryConstants.TWO_TO_20",1048576,void 0),u("jspb.BinaryConstants.TWO_TO_23",8388608,void 0),u("jspb.BinaryConstants.TWO_TO_31",2147483648,void 0),u("jspb.BinaryConstants.TWO_TO_32",4294967296,void 0),u("jspb.BinaryConstants.TWO_TO_52",4503599627370496,void 0),u("jspb.BinaryConstants.TWO_TO_63",0x8000000000000000,void 0),u("jspb.BinaryConstants.TWO_TO_64",0x10000000000000000,void 0),u("jspb.BinaryConstants.ZERO_HASH","\0\0\0\0\0\0\0\0",void 0);var x=0,j=0;function D(t){var e=t>>>0;t=Math.floor((t-e)/4294967296)>>>0,x=e,j=t}function L(t){var e=0>t,r=(t=Math.abs(t))>>>0;t=Math.floor((t-r)/4294967296),t>>>=0,e&&(t=~t>>>0,4294967295<(r=1+(~r>>>0))&&(r=0,4294967295<++t&&(t=0))),x=r,j=t}function M(t){var e=0>t;D(t=2*Math.abs(t)),t=x;var r=j;e&&(0==t?0==r?r=t=4294967295:(r--,t=4294967295):t--),x=t,j=r}function U(t){var e=0>t?1:0;if(0===(t=e?-t:t))0<1/t?x=j=0:(j=0,x=2147483648);else if(isNaN(t))j=0,x=2147483647;else if(34028234663852886e22<t)j=0,x=(e<<31|2139095040)>>>0;else if(11754943508222875e-54>t)t=Math.round(t/Math.pow(2,-149)),j=0,x=(e<<31|t)>>>0;else{var r=Math.floor(Math.log(t)/Math.LN2);t*=Math.pow(2,-r),16777216<=(t=Math.round(8388608*t))&&++r,j=0,x=(e<<31|r+127<<23|8388607&t)>>>0}}function W(t){var e=0>t?1:0;if(0===(t=e?-t:t))j=0<1/t?0:2147483648,x=0;else if(isNaN(t))j=2147483647,x=4294967295;else if(17976931348623157e292<t)j=(e<<31|2146435072)>>>0,x=0;else if(22250738585072014e-324>t)t/=Math.pow(2,-1074),j=(e<<31|t/4294967296)>>>0,x=t>>>0;else{var r=t,o=0;if(2<=r)for(;2<=r&&1023>o;)o++,r/=2;else for(;1>r&&-1022<o;)r*=2,o--;t*=Math.pow(2,-o),j=(e<<31|o+1023<<20|1048576*t&1048575)>>>0,x=4503599627370496*t>>>0}}function $(t){var e=t.charCodeAt(4),r=t.charCodeAt(5),o=t.charCodeAt(6),i=t.charCodeAt(7);x=t.charCodeAt(0)+(t.charCodeAt(1)<<8)+(t.charCodeAt(2)<<16)+(t.charCodeAt(3)<<24)>>>0,j=e+(r<<8)+(o<<16)+(i<<24)>>>0}function V(t,e){return 4294967296*e+(t>>>0)}function z(t,e){var r=2147483648&e;return r&&(e=~e>>>0,0==(t=1+~t>>>0)&&(e=e+1>>>0)),t=V(t,e),r?-t:t}function G(t,e,r){var o=e>>31;return r(t<<1^o,(e<<1|t>>>31)^o)}function H(t,e){return q(t,e,z)}function q(t,e,r){var o=-(1&t);return r((t>>>1|e<<31)^o,e>>>1^o)}function K(t){var e=2*(t>>31)+1,r=t>>>23&255;return t&=8388607,255==r?t?NaN:1/0*e:0==r?e*Math.pow(2,-149)*t:e*Math.pow(2,r-150)*(t+Math.pow(2,23))}function Y(t,e){var r=2*(e>>31)+1,o=e>>>20&2047;return t=4294967296*(1048575&e)+t,2047==o?t?NaN:1/0*r:0==o?r*Math.pow(2,-1074)*t:r*Math.pow(2,o-1075)*(t+4503599627370496)}function J(t,e){return String.fromCharCode(t>>>0&255,t>>>8&255,t>>>16&255,t>>>24&255,e>>>0&255,e>>>8&255,e>>>16&255,e>>>24&255)}function X(t,e){function r(t,e){return t=t?String(t):"",e?"0000000".slice(t.length)+t:t}if(2097151>=e)return""+V(t,e);var o=(t>>>24|e<<8)>>>0&16777215;return t=(16777215&t)+6777216*o+6710656*(e=e>>16&65535),o+=8147497*e,e*=2,1e7<=t&&(o+=Math.floor(t/1e7),t%=1e7),1e7<=o&&(e+=Math.floor(o/1e7),o%=1e7),r(e,0)+r(o,e)+r(t,1)}function Z(t,e){var r=2147483648&e;return r&&(e=~e+(0==(t=1+~t>>>0)?1:0)>>>0),t=X(t,e),r?"-"+t:t}function Q(t,e){$(t),t=x;var r=j;return e?Z(t,r):X(t,r)}function tt(t){function e(t,e){for(var r=0;8>r&&(1!==t||0<e);r++)e=t*o[r]+e,o[r]=255&e,e>>>=8}b(0<t.length);var r=!1;"-"===t[0]&&(r=!0,t=t.slice(1));for(var o=[0,0,0,0,0,0,0,0],i=0;i<t.length;i++)e(10,t.charCodeAt(i)-48);return r&&(function(){for(var t=0;8>t;t++)o[t]=255&~o[t]}(),e(1,1)),T(o)}function et(t){return String.fromCharCode(10>t?48+t:87+t)}function rt(t){return 97<=t?t-97+10:t-48}function ot(t,e,r,o,i){var n=0;if(128>o)for(;e<r&&t[e++]==o;)n++,e+=i;else for(;e<r;){for(var s=o;128<s;){if(t[e++]!=(127&s|128))return n;s>>=7}if(t[e++]!=s)break;n++,e+=i}return n}function it(t){return t.constructor===Uint8Array?t:t.constructor===ArrayBuffer||t.constructor===Array?new Uint8Array(t):t.constructor===String?C(t):t instanceof Uint8Array?new Uint8Array(t.buffer,t.byteOffset,t.byteLength):(v("Type not convertible to Uint8Array."),new Uint8Array(0))}function nt(t,e,r){this.b=null,this.a=this.c=this.h=0,this.v=!1,t&&this.H(t,e,r)}u("jspb.utils.getSplit64Low",(function(){return x}),void 0),u("jspb.utils.getSplit64High",(function(){return j}),void 0),u("jspb.utils.splitUint64",D,void 0),u("jspb.utils.splitInt64",L,void 0),u("jspb.utils.splitZigzag64",M,void 0),u("jspb.utils.splitFloat32",U,void 0),u("jspb.utils.splitFloat64",W,void 0),u("jspb.utils.splitHash64",$,void 0),u("jspb.utils.joinUint64",V,void 0),u("jspb.utils.joinInt64",z,void 0),u("jspb.utils.toZigzag64",G,void 0),u("jspb.utils.joinZigzag64",H,void 0),u("jspb.utils.fromZigzag64",q,void 0),u("jspb.utils.joinFloat32",K,void 0),u("jspb.utils.joinFloat64",Y,void 0),u("jspb.utils.joinHash64",J,void 0),u("jspb.utils.DIGITS","0123456789abcdef".split(""),void 0),u("jspb.utils.joinUnsignedDecimalString",X,void 0),u("jspb.utils.joinSignedDecimalString",Z,void 0),u("jspb.utils.hash64ToDecimalString",Q,void 0),u("jspb.utils.hash64ArrayToDecimalStrings",(function(t,e){for(var r=Array(t.length),o=0;o<t.length;o++)r[o]=Q(t[o],e);return r}),void 0),u("jspb.utils.decimalStringToHash64",tt,void 0),u("jspb.utils.splitDecimalString",(function(t){$(tt(t))}),void 0),u("jspb.utils.hash64ToHexString",(function(t){var e=Array(18);e[0]="0",e[1]="x";for(var r=0;8>r;r++){var o=t.charCodeAt(7-r);e[2*r+2]=et(o>>4),e[2*r+3]=et(15&o)}return e.join("")}),void 0),u("jspb.utils.hexStringToHash64",(function(t){b(18==(t=t.toLowerCase()).length),b("0"==t[0]),b("x"==t[1]);for(var e="",r=0;8>r;r++)e=String.fromCharCode(16*rt(t.charCodeAt(2*r+2))+rt(t.charCodeAt(2*r+3)))+e;return e}),void 0),u("jspb.utils.hash64ToNumber",(function(t,e){$(t),t=x;var r=j;return e?z(t,r):V(t,r)}),void 0),u("jspb.utils.numberToHash64",(function(t){return L(t),J(x,j)}),void 0),u("jspb.utils.countVarints",(function(t,e,r){for(var o=0,i=e;i<r;i++)o+=t[i]>>7;return r-e-o}),void 0),u("jspb.utils.countVarintFields",(function(t,e,r,o){var i=0;if(128>(o*=8))for(;e<r&&t[e++]==o;)for(i++;;){var n=t[e++];if(!(128&n))break}else for(;e<r;){for(n=o;128<n;){if(t[e]!=(127&n|128))return i;e++,n>>=7}if(t[e++]!=n)break;for(i++;128&(n=t[e++]););}return i}),void 0),u("jspb.utils.countFixed32Fields",(function(t,e,r,o){return ot(t,e,r,8*o+5,4)}),void 0),u("jspb.utils.countFixed64Fields",(function(t,e,r,o){return ot(t,e,r,8*o+1,8)}),void 0),u("jspb.utils.countDelimitedFields",(function(t,e,r,o){var i=0;for(o=8*o+2;e<r;){for(var n=o;128<n;){if(t[e++]!=(127&n|128))return i;n>>=7}if(t[e++]!=n)break;i++;for(var s=0,a=1;s+=(127&(n=t[e++]))*a,a*=128,128&n;);e+=s}return i}),void 0),u("jspb.utils.debugBytesToTextFormat",(function(t){var e='"';if(t){t=it(t);for(var r=0;r<t.length;r++)e+="\\x",16>t[r]&&(e+="0"),e+=t[r].toString(16)}return e+'"'}),void 0),u("jspb.utils.debugScalarToTextFormat",(function(t){if("string"==typeof t){t=String(t);for(var e=['"'],r=0;r<t.length;r++){var o,i=t.charAt(r),n=i.charCodeAt(0),s=r+1;(o=k[i])||(31<n&&127>n||((n=i)in A?i=A[n]:n in k?i=A[n]=k[n]:(31<(o=n.charCodeAt(0))&&127>o?i=n:(256>o?(i="\\x",(16>o||256<o)&&(i+="0")):(i="\\u",4096>o&&(i+="0")),i+=o.toString(16).toUpperCase()),i=A[n]=i)),o=i),e[s]=o}e.push('"'),t=e.join("")}else t=t.toString();return t}),void 0),u("jspb.utils.stringToByteArray",(function(t){for(var e=new Uint8Array(t.length),r=0;r<t.length;r++){var o=t.charCodeAt(r);if(255<o)throw Error("Conversion error: string contains codepoint outside of byte range");e[r]=o}return e}),void 0),u("jspb.utils.byteSourceToUint8Array",it,void 0),u("jspb.BinaryDecoder",nt,void 0);var st=[];function at(t,e,r){if(st.length){var o=st.pop();return t&&o.H(t,e,r),o}return new nt(t,e,r)}function pt(t,e,r){this.a=at(t,e,r),this.O=this.a.B(),this.b=this.c=-1,this.h=!1,this.v=null}nt.getInstanceCacheLength=function(){return st.length},nt.alloc=at,nt.prototype.Ca=function(){this.clear(),100>st.length&&st.push(this)},nt.prototype.free=nt.prototype.Ca,nt.prototype.clone=function(){return at(this.b,this.h,this.c-this.h)},nt.prototype.clone=nt.prototype.clone,nt.prototype.clear=function(){this.b=null,this.a=this.c=this.h=0,this.v=!1},nt.prototype.clear=nt.prototype.clear,nt.prototype.Y=function(){return this.b},nt.prototype.getBuffer=nt.prototype.Y,nt.prototype.H=function(t,e,r){this.b=it(t),this.h=void 0!==e?e:0,this.c=void 0!==r?this.h+r:this.b.length,this.a=this.h},nt.prototype.setBlock=nt.prototype.H,nt.prototype.Db=function(){return this.c},nt.prototype.getEnd=nt.prototype.Db,nt.prototype.setEnd=function(t){this.c=t},nt.prototype.setEnd=nt.prototype.setEnd,nt.prototype.reset=function(){this.a=this.h},nt.prototype.reset=nt.prototype.reset,nt.prototype.B=function(){return this.a},nt.prototype.getCursor=nt.prototype.B,nt.prototype.Ma=function(t){this.a=t},nt.prototype.setCursor=nt.prototype.Ma,nt.prototype.advance=function(t){this.a+=t,b(this.a<=this.c)},nt.prototype.advance=nt.prototype.advance,nt.prototype.ya=function(){return this.a==this.c},nt.prototype.atEnd=nt.prototype.ya,nt.prototype.Qb=function(){return this.a>this.c},nt.prototype.pastEnd=nt.prototype.Qb,nt.prototype.getError=function(){return this.v||0>this.a||this.a>this.c},nt.prototype.getError=nt.prototype.getError,nt.prototype.w=function(t){for(var e=128,r=0,o=0,i=0;4>i&&128<=e;i++)r|=(127&(e=this.b[this.a++]))<<7*i;if(128<=e&&(r|=(127&(e=this.b[this.a++]))<<28,o|=(127&e)>>4),128<=e)for(i=0;5>i&&128<=e;i++)o|=(127&(e=this.b[this.a++]))<<7*i+3;if(128>e)return t(r>>>0,o>>>0);v("Failed to read varint, encoding is invalid."),this.v=!0},nt.prototype.readSplitVarint64=nt.prototype.w,nt.prototype.ea=function(t){return this.w((function(e,r){return q(e,r,t)}))},nt.prototype.readSplitZigzagVarint64=nt.prototype.ea,nt.prototype.ta=function(t){var e=this.b,r=this.a;this.a+=8;for(var o=0,i=0,n=r+7;n>=r;n--)o=o<<8|e[n],i=i<<8|e[n+4];return t(o,i)},nt.prototype.readSplitFixed64=nt.prototype.ta,nt.prototype.kb=function(){for(;128&this.b[this.a];)this.a++;this.a++},nt.prototype.skipVarint=nt.prototype.kb,nt.prototype.mb=function(t){for(;128<t;)this.a--,t>>>=7;this.a--},nt.prototype.unskipVarint=nt.prototype.mb,nt.prototype.o=function(){var t=this.b,e=t[this.a],r=127&e;return 128>e?(this.a+=1,b(this.a<=this.c),r):(r|=(127&(e=t[this.a+1]))<<7,128>e?(this.a+=2,b(this.a<=this.c),r):(r|=(127&(e=t[this.a+2]))<<14,128>e?(this.a+=3,b(this.a<=this.c),r):(r|=(127&(e=t[this.a+3]))<<21,128>e?(this.a+=4,b(this.a<=this.c),r):(r|=(15&(e=t[this.a+4]))<<28,128>e?(this.a+=5,b(this.a<=this.c),r>>>0):(this.a+=5,128<=t[this.a++]&&128<=t[this.a++]&&128<=t[this.a++]&&128<=t[this.a++]&&128<=t[this.a++]&&b(!1),b(this.a<=this.c),r)))))},nt.prototype.readUnsignedVarint32=nt.prototype.o,nt.prototype.da=function(){return~~this.o()},nt.prototype.readSignedVarint32=nt.prototype.da,nt.prototype.O=function(){return this.o().toString()},nt.prototype.Ea=function(){return this.da().toString()},nt.prototype.readSignedVarint32String=nt.prototype.Ea,nt.prototype.Ia=function(){var t=this.o();return t>>>1^-(1&t)},nt.prototype.readZigzagVarint32=nt.prototype.Ia,nt.prototype.Ga=function(){return this.w(V)},nt.prototype.readUnsignedVarint64=nt.prototype.Ga,nt.prototype.Ha=function(){return this.w(X)},nt.prototype.readUnsignedVarint64String=nt.prototype.Ha,nt.prototype.sa=function(){return this.w(z)},nt.prototype.readSignedVarint64=nt.prototype.sa,nt.prototype.Fa=function(){return this.w(Z)},nt.prototype.readSignedVarint64String=nt.prototype.Fa,nt.prototype.Ja=function(){return this.w(H)},nt.prototype.readZigzagVarint64=nt.prototype.Ja,nt.prototype.fb=function(){return this.ea(J)},nt.prototype.readZigzagVarintHash64=nt.prototype.fb,nt.prototype.Ka=function(){return this.ea(Z)},nt.prototype.readZigzagVarint64String=nt.prototype.Ka,nt.prototype.Gc=function(){var t=this.b[this.a];return this.a+=1,b(this.a<=this.c),t},nt.prototype.readUint8=nt.prototype.Gc,nt.prototype.Ec=function(){var t=this.b[this.a],e=this.b[this.a+1];return this.a+=2,b(this.a<=this.c),t|e<<8},nt.prototype.readUint16=nt.prototype.Ec,nt.prototype.m=function(){var t=this.b[this.a],e=this.b[this.a+1],r=this.b[this.a+2],o=this.b[this.a+3];return this.a+=4,b(this.a<=this.c),(t|e<<8|r<<16|o<<24)>>>0},nt.prototype.readUint32=nt.prototype.m,nt.prototype.ga=function(){return V(this.m(),this.m())},nt.prototype.readUint64=nt.prototype.ga,nt.prototype.ha=function(){return X(this.m(),this.m())},nt.prototype.readUint64String=nt.prototype.ha,nt.prototype.Xb=function(){var t=this.b[this.a];return this.a+=1,b(this.a<=this.c),t<<24>>24},nt.prototype.readInt8=nt.prototype.Xb,nt.prototype.Vb=function(){var t=this.b[this.a],e=this.b[this.a+1];return this.a+=2,b(this.a<=this.c),(t|e<<8)<<16>>16},nt.prototype.readInt16=nt.prototype.Vb,nt.prototype.P=function(){var t=this.b[this.a],e=this.b[this.a+1],r=this.b[this.a+2],o=this.b[this.a+3];return this.a+=4,b(this.a<=this.c),t|e<<8|r<<16|o<<24},nt.prototype.readInt32=nt.prototype.P,nt.prototype.ba=function(){return z(this.m(),this.m())},nt.prototype.readInt64=nt.prototype.ba,nt.prototype.ca=function(){return Z(this.m(),this.m())},nt.prototype.readInt64String=nt.prototype.ca,nt.prototype.aa=function(){return K(this.m())},nt.prototype.readFloat=nt.prototype.aa,nt.prototype.Z=function(){return Y(this.m(),this.m())},nt.prototype.readDouble=nt.prototype.Z,nt.prototype.pa=function(){return!!this.b[this.a++]},nt.prototype.readBool=nt.prototype.pa,nt.prototype.ra=function(){return this.da()},nt.prototype.readEnum=nt.prototype.ra,nt.prototype.fa=function(t){var e=this.b,r=this.a;t=r+t;for(var o=[],i="";r<t;){var n=e[r++];if(128>n)o.push(n);else{if(192>n)continue;if(224>n){var s=e[r++];o.push((31&n)<<6|63&s)}else if(240>n){s=e[r++];var a=e[r++];o.push((15&n)<<12|(63&s)<<6|63&a)}else 248>n&&(n=(7&n)<<18|(63&(s=e[r++]))<<12|(63&(a=e[r++]))<<6|63&e[r++],n-=65536,o.push(55296+(n>>10&1023),56320+(1023&n)))}8192<=o.length&&(i+=String.fromCharCode.apply(null,o),o.length=0)}return i+=T(o),this.a=r,i},nt.prototype.readString=nt.prototype.fa,nt.prototype.Dc=function(){var t=this.o();return this.fa(t)},nt.prototype.readStringWithLength=nt.prototype.Dc,nt.prototype.qa=function(t){if(0>t||this.a+t>this.b.length)return this.v=!0,v("Invalid byte length!"),new Uint8Array(0);var e=this.b.subarray(this.a,this.a+t);return this.a+=t,b(this.a<=this.c),e},nt.prototype.readBytes=nt.prototype.qa,nt.prototype.ia=function(){return this.w(J)},nt.prototype.readVarintHash64=nt.prototype.ia,nt.prototype.$=function(){var t=this.b,e=this.a,r=t[e],o=t[e+1],i=t[e+2],n=t[e+3],s=t[e+4],a=t[e+5],p=t[e+6];return t=t[e+7],this.a+=8,String.fromCharCode(r,o,i,n,s,a,p,t)},nt.prototype.readFixedHash64=nt.prototype.$,u("jspb.BinaryReader",pt,void 0);var ct=[];function ut(t,e,r){if(ct.length){var o=ct.pop();return t&&o.a.H(t,e,r),o}return new pt(t,e,r)}function ht(t,e){b(2==t.b);var r=t.a.o();r=t.a.B()+r;for(var o=[];t.a.B()<r;)o.push(e.call(t.a));return o}function lt(t,e,r,o,i){this.ma=t,this.Ba=e,this.la=r,this.Na=o,this.na=i}function ft(t,e,r,o,i,n){this.Za=t,this.za=e,this.Aa=r,this.Wa=o,this.Ab=i,this.Nb=n}function dt(){}pt.clearInstanceCache=function(){ct=[]},pt.getInstanceCacheLength=function(){return ct.length},pt.alloc=ut,pt.prototype.zb=ut,pt.prototype.alloc=pt.prototype.zb,pt.prototype.Ca=function(){this.a.clear(),this.b=this.c=-1,this.h=!1,this.v=null,100>ct.length&&ct.push(this)},pt.prototype.free=pt.prototype.Ca,pt.prototype.Fb=function(){return this.O},pt.prototype.getFieldCursor=pt.prototype.Fb,pt.prototype.B=function(){return this.a.B()},pt.prototype.getCursor=pt.prototype.B,pt.prototype.Y=function(){return this.a.Y()},pt.prototype.getBuffer=pt.prototype.Y,pt.prototype.Hb=function(){return this.c},pt.prototype.getFieldNumber=pt.prototype.Hb,pt.prototype.Lb=function(){return this.b},pt.prototype.getWireType=pt.prototype.Lb,pt.prototype.Mb=function(){return 2==this.b},pt.prototype.isDelimited=pt.prototype.Mb,pt.prototype.bb=function(){return 4==this.b},pt.prototype.isEndGroup=pt.prototype.bb,pt.prototype.getError=function(){return this.h||this.a.getError()},pt.prototype.getError=pt.prototype.getError,pt.prototype.H=function(t,e,r){this.a.H(t,e,r),this.b=this.c=-1},pt.prototype.setBlock=pt.prototype.H,pt.prototype.reset=function(){this.a.reset(),this.b=this.c=-1},pt.prototype.reset=pt.prototype.reset,pt.prototype.advance=function(t){this.a.advance(t)},pt.prototype.advance=pt.prototype.advance,pt.prototype.oa=function(){if(this.a.ya())return!1;if(this.getError())return v("Decoder hit an error"),!1;this.O=this.a.B();var t=this.a.o(),e=t>>>3;return 0!=(t&=7)&&5!=t&&1!=t&&2!=t&&3!=t&&4!=t?(v("Invalid wire type: %s (at position %s)",t,this.O),this.h=!0,!1):(this.c=e,this.b=t,!0)},pt.prototype.nextField=pt.prototype.oa,pt.prototype.Oa=function(){this.a.mb(this.c<<3|this.b)},pt.prototype.unskipHeader=pt.prototype.Oa,pt.prototype.Lc=function(){var t=this.c;for(this.Oa();this.oa()&&this.c==t;)this.C();this.a.ya()||this.Oa()},pt.prototype.skipMatchingFields=pt.prototype.Lc,pt.prototype.lb=function(){0!=this.b?(v("Invalid wire type for skipVarintField"),this.C()):this.a.kb()},pt.prototype.skipVarintField=pt.prototype.lb,pt.prototype.gb=function(){if(2!=this.b)v("Invalid wire type for skipDelimitedField"),this.C();else{var t=this.a.o();this.a.advance(t)}},pt.prototype.skipDelimitedField=pt.prototype.gb,pt.prototype.hb=function(){5!=this.b?(v("Invalid wire type for skipFixed32Field"),this.C()):this.a.advance(4)},pt.prototype.skipFixed32Field=pt.prototype.hb,pt.prototype.ib=function(){1!=this.b?(v("Invalid wire type for skipFixed64Field"),this.C()):this.a.advance(8)},pt.prototype.skipFixed64Field=pt.prototype.ib,pt.prototype.jb=function(){for(var t=this.c;;){if(!this.oa()){v("Unmatched start-group tag: stream EOF"),this.h=!0;break}if(4==this.b){this.c!=t&&(v("Unmatched end-group tag"),this.h=!0);break}this.C()}},pt.prototype.skipGroup=pt.prototype.jb,pt.prototype.C=function(){switch(this.b){case 0:this.lb();break;case 1:this.ib();break;case 2:this.gb();break;case 5:this.hb();break;case 3:this.jb();break;default:v("Invalid wire encoding for field.")}},pt.prototype.skipField=pt.prototype.C,pt.prototype.Hc=function(t,e){null===this.v&&(this.v={}),b(!this.v[t]),this.v[t]=e},pt.prototype.registerReadCallback=pt.prototype.Hc,pt.prototype.Ic=function(t){return b(null!==this.v),b(t=this.v[t]),t(this)},pt.prototype.runReadCallback=pt.prototype.Ic,pt.prototype.Yb=function(t,e){b(2==this.b);var r=this.a.c,o=this.a.o();o=this.a.B()+o,this.a.setEnd(o),e(t,this),this.a.Ma(o),this.a.setEnd(r)},pt.prototype.readMessage=pt.prototype.Yb,pt.prototype.Ub=function(t,e,r){b(3==this.b),b(this.c==t),r(e,this),this.h||4==this.b||(v("Group submessage did not end with an END_GROUP tag"),this.h=!0)},pt.prototype.readGroup=pt.prototype.Ub,pt.prototype.Gb=function(){b(2==this.b);var t=this.a.o(),e=this.a.B(),r=e+t;return t=at(this.a.Y(),e,t),this.a.Ma(r),t},pt.prototype.getFieldDecoder=pt.prototype.Gb,pt.prototype.P=function(){return b(0==this.b),this.a.da()},pt.prototype.readInt32=pt.prototype.P,pt.prototype.Wb=function(){return b(0==this.b),this.a.Ea()},pt.prototype.readInt32String=pt.prototype.Wb,pt.prototype.ba=function(){return b(0==this.b),this.a.sa()},pt.prototype.readInt64=pt.prototype.ba,pt.prototype.ca=function(){return b(0==this.b),this.a.Fa()},pt.prototype.readInt64String=pt.prototype.ca,pt.prototype.m=function(){return b(0==this.b),this.a.o()},pt.prototype.readUint32=pt.prototype.m,pt.prototype.Fc=function(){return b(0==this.b),this.a.O()},pt.prototype.readUint32String=pt.prototype.Fc,pt.prototype.ga=function(){return b(0==this.b),this.a.Ga()},pt.prototype.readUint64=pt.prototype.ga,pt.prototype.ha=function(){return b(0==this.b),this.a.Ha()},pt.prototype.readUint64String=pt.prototype.ha,pt.prototype.zc=function(){return b(0==this.b),this.a.Ia()},pt.prototype.readSint32=pt.prototype.zc,pt.prototype.Ac=function(){return b(0==this.b),this.a.Ja()},pt.prototype.readSint64=pt.prototype.Ac,pt.prototype.Bc=function(){return b(0==this.b),this.a.Ka()},pt.prototype.readSint64String=pt.prototype.Bc,pt.prototype.Rb=function(){return b(5==this.b),this.a.m()},pt.prototype.readFixed32=pt.prototype.Rb,pt.prototype.Sb=function(){return b(1==this.b),this.a.ga()},pt.prototype.readFixed64=pt.prototype.Sb,pt.prototype.Tb=function(){return b(1==this.b),this.a.ha()},pt.prototype.readFixed64String=pt.prototype.Tb,pt.prototype.vc=function(){return b(5==this.b),this.a.P()},pt.prototype.readSfixed32=pt.prototype.vc,pt.prototype.wc=function(){return b(5==this.b),this.a.P().toString()},pt.prototype.readSfixed32String=pt.prototype.wc,pt.prototype.xc=function(){return b(1==this.b),this.a.ba()},pt.prototype.readSfixed64=pt.prototype.xc,pt.prototype.yc=function(){return b(1==this.b),this.a.ca()},pt.prototype.readSfixed64String=pt.prototype.yc,pt.prototype.aa=function(){return b(5==this.b),this.a.aa()},pt.prototype.readFloat=pt.prototype.aa,pt.prototype.Z=function(){return b(1==this.b),this.a.Z()},pt.prototype.readDouble=pt.prototype.Z,pt.prototype.pa=function(){return b(0==this.b),!!this.a.o()},pt.prototype.readBool=pt.prototype.pa,pt.prototype.ra=function(){return b(0==this.b),this.a.sa()},pt.prototype.readEnum=pt.prototype.ra,pt.prototype.fa=function(){b(2==this.b);var t=this.a.o();return this.a.fa(t)},pt.prototype.readString=pt.prototype.fa,pt.prototype.qa=function(){b(2==this.b);var t=this.a.o();return this.a.qa(t)},pt.prototype.readBytes=pt.prototype.qa,pt.prototype.ia=function(){return b(0==this.b),this.a.ia()},pt.prototype.readVarintHash64=pt.prototype.ia,pt.prototype.Cc=function(){return b(0==this.b),this.a.fb()},pt.prototype.readSintHash64=pt.prototype.Cc,pt.prototype.w=function(t){return b(0==this.b),this.a.w(t)},pt.prototype.readSplitVarint64=pt.prototype.w,pt.prototype.ea=function(t){return b(0==this.b),this.a.w((function(e,r){return q(e,r,t)}))},pt.prototype.readSplitZigzagVarint64=pt.prototype.ea,pt.prototype.$=function(){return b(1==this.b),this.a.$()},pt.prototype.readFixedHash64=pt.prototype.$,pt.prototype.ta=function(t){return b(1==this.b),this.a.ta(t)},pt.prototype.readSplitFixed64=pt.prototype.ta,pt.prototype.gc=function(){return ht(this,this.a.da)},pt.prototype.readPackedInt32=pt.prototype.gc,pt.prototype.hc=function(){return ht(this,this.a.Ea)},pt.prototype.readPackedInt32String=pt.prototype.hc,pt.prototype.ic=function(){return ht(this,this.a.sa)},pt.prototype.readPackedInt64=pt.prototype.ic,pt.prototype.jc=function(){return ht(this,this.a.Fa)},pt.prototype.readPackedInt64String=pt.prototype.jc,pt.prototype.qc=function(){return ht(this,this.a.o)},pt.prototype.readPackedUint32=pt.prototype.qc,pt.prototype.rc=function(){return ht(this,this.a.O)},pt.prototype.readPackedUint32String=pt.prototype.rc,pt.prototype.sc=function(){return ht(this,this.a.Ga)},pt.prototype.readPackedUint64=pt.prototype.sc,pt.prototype.tc=function(){return ht(this,this.a.Ha)},pt.prototype.readPackedUint64String=pt.prototype.tc,pt.prototype.nc=function(){return ht(this,this.a.Ia)},pt.prototype.readPackedSint32=pt.prototype.nc,pt.prototype.oc=function(){return ht(this,this.a.Ja)},pt.prototype.readPackedSint64=pt.prototype.oc,pt.prototype.pc=function(){return ht(this,this.a.Ka)},pt.prototype.readPackedSint64String=pt.prototype.pc,pt.prototype.bc=function(){return ht(this,this.a.m)},pt.prototype.readPackedFixed32=pt.prototype.bc,pt.prototype.cc=function(){return ht(this,this.a.ga)},pt.prototype.readPackedFixed64=pt.prototype.cc,pt.prototype.dc=function(){return ht(this,this.a.ha)},pt.prototype.readPackedFixed64String=pt.prototype.dc,pt.prototype.kc=function(){return ht(this,this.a.P)},pt.prototype.readPackedSfixed32=pt.prototype.kc,pt.prototype.lc=function(){return ht(this,this.a.ba)},pt.prototype.readPackedSfixed64=pt.prototype.lc,pt.prototype.mc=function(){return ht(this,this.a.ca)},pt.prototype.readPackedSfixed64String=pt.prototype.mc,pt.prototype.fc=function(){return ht(this,this.a.aa)},pt.prototype.readPackedFloat=pt.prototype.fc,pt.prototype.$b=function(){return ht(this,this.a.Z)},pt.prototype.readPackedDouble=pt.prototype.$b,pt.prototype.Zb=function(){return ht(this,this.a.pa)},pt.prototype.readPackedBool=pt.prototype.Zb,pt.prototype.ac=function(){return ht(this,this.a.ra)},pt.prototype.readPackedEnum=pt.prototype.ac,pt.prototype.uc=function(){return ht(this,this.a.ia)},pt.prototype.readPackedVarintHash64=pt.prototype.uc,pt.prototype.ec=function(){return ht(this,this.a.$)},pt.prototype.readPackedFixedHash64=pt.prototype.ec,u("jspb.ExtensionFieldInfo",lt,void 0),u("jspb.ExtensionFieldBinaryInfo",ft,void 0),lt.prototype.F=function(){return!!this.la},lt.prototype.isMessageType=lt.prototype.F,u("jspb.Message",dt,void 0),dt.GENERATE_TO_OBJECT=!0,dt.GENERATE_FROM_OBJECT=!0;var yt="function"==typeof Uint8Array;dt.prototype.Ib=function(){return this.b},dt.prototype.getJsPbMessageId=dt.prototype.Ib,dt.initialize=function(t,e,r,o,i,n){if(t.f=null,e||(e=r?[r]:[]),t.b=r?String(r):void 0,t.D=0===r?-1:0,t.u=e,e=-1,!(r=t.u.length)||(e=r-1,null===(r=t.u[e])||"object"!=typeof r||Array.isArray(r)||yt&&r instanceof Uint8Array)?-1<o?(t.G=Math.max(o,e+1-t.D),t.i=null):t.G=Number.MAX_VALUE:(t.G=e-t.D,t.i=r),t.a={},i)for(o=0;o<i.length;o++)(e=i[o])<t.G?(e+=t.D,t.u[e]=t.u[e]||gt):(mt(t),t.i[e]=t.i[e]||gt);if(n&&n.length)for(o=0;o<n.length;o++)At(t,n[o])};var gt=Object.freeze?Object.freeze([]):[];function mt(t){var e=t.G+t.D;t.u[e]||(t.i=t.u[e]={})}function bt(t,e,r){for(var o=[],i=0;i<t.length;i++)o[i]=e.call(t[i],r,t[i]);return o}function vt(t,e){if(e<t.G){e+=t.D;var r=t.u[e];return r===gt?t.u[e]=[]:r}if(t.i)return(r=t.i[e])===gt?t.i[e]=[]:r}function wt(t,e){return null==(t=vt(t,e))?t:+t}function _t(t,e){return null==(t=vt(t,e))?t:!!t}function St(t){return null==t||"string"==typeof t?t:yt&&t instanceof Uint8Array?I(t):(v("Cannot coerce to b64 string: "+h(t)),null)}function Et(t){return null==t||t instanceof Uint8Array?t:"string"==typeof t?C(t):(v("Cannot coerce to Uint8Array: "+h(t)),null)}function Ot(t){if(t&&1<t.length){var e=h(t[0]);d(t,(function(t){h(t)!=e&&v("Inconsistent type in JSPB repeated field array. Got "+h(t)+" expected "+e)}))}}function Ft(t,e,r){return null==(t=vt(t,e))?r:t}function Rt(t,e,r){return w(t,dt),e<t.G?t.u[e+t.D]=r:(mt(t),t.i[e]=r),t}function Tt(t,e,r,o){return w(t,dt),r!==o?Rt(t,e,r):e<t.G?t.u[e+t.D]=null:(mt(t),delete t.i[e]),t}function kt(t,e,r,o){return w(t,dt),(r=At(t,r))&&r!==e&&void 0!==o&&(t.f&&r in t.f&&(t.f[r]=void 0),Rt(t,r,void 0)),Rt(t,e,o)}function At(t,e){for(var r,o,i=0;i<e.length;i++){var n=e[i],s=vt(t,n);null!=s&&(r=n,o=s,Rt(t,n,void 0))}return r?(Rt(t,r,o),r):0}function Pt(t,e,r){if(t.f||(t.f={}),!t.f[r]){for(var o=vt(t,r),i=[],n=0;n<o.length;n++)i[n]=new e(o[n]);t.f[r]=i}}function Nt(t){if(t.f)for(var e in t.f){var r=t.f[e];if(Array.isArray(r))for(var o=0;o<r.length;o++)r[o]&&r[o].g();else r&&r.g()}}function It(t,e){t=t||{},e=e||{};var r,o={};for(r in t)o[r]=0;for(r in e)o[r]=0;for(r in o)if(!Ct(t[r],e[r]))return!1;return!0}function Ct(t,e){if(t==e)return!0;if(!l(t)||!l(e))return!!("number"==typeof t&&isNaN(t)||"number"==typeof e&&isNaN(e))&&String(t)==String(e);if(t.constructor!=e.constructor)return!1;if(yt&&t.constructor===Uint8Array){if(t.length!=e.length)return!1;for(var r=0;r<t.length;r++)if(t[r]!=e[r])return!1;return!0}if(t.constructor===Array){var o=void 0,i=void 0,n=Math.max(t.length,e.length);for(r=0;r<n;r++){var s=t[r],a=e[r];if(s&&s.constructor==Object&&(b(void 0===o),b(r===t.length-1),o=s,s=void 0),a&&a.constructor==Object&&(b(void 0===i),b(r===e.length-1),i=a,a=void 0),!Ct(s,a))return!1}return!o&&!i||It(o=o||{},i=i||{})}if(t.constructor===Object)return It(t,e);throw Error("Invalid type in JSPB array")}function Bt(t){return new t.constructor(xt(t.g()))}function xt(t){if(Array.isArray(t)){for(var e=Array(t.length),r=0;r<t.length;r++){var o=t[r];null!=o&&(e[r]="object"==typeof o?xt(b(o)):o)}return e}if(yt&&t instanceof Uint8Array)return new Uint8Array(t);for(r in e={},t)null!=(o=t[r])&&(e[r]="object"==typeof o?xt(b(o)):o);return e}dt.toObjectList=bt,dt.toObjectExtension=function(t,e,r,o,i){for(var n in r){var s=r[n],a=o.call(t,s);if(null!=a){for(var p in s.Ba)if(s.Ba.hasOwnProperty(p))break;e[p]=s.Na?s.na?bt(a,s.Na,i):s.Na(i,a):a}}},dt.serializeBinaryExtensions=function(t,e,r,o){for(var i in r){var n=r[i],s=n.Za;if(!n.Aa)throw Error("Message extension present that was generated without binary serialization support");var a=o.call(t,s);if(null!=a)if(s.F()){if(!n.Wa)throw Error("Message extension present holding submessage without binary support enabled, and message is being serialized to binary format");n.Aa.call(e,s.ma,a,n.Wa)}else n.Aa.call(e,s.ma,a)}},dt.readBinaryExtension=function(t,e,r,o,i){var n=r[e.c];if(n){if(r=n.Za,!n.za)throw Error("Deserializing extension whose generated code does not support binary format");if(r.F()){var s=new r.la;n.za.call(e,s,n.Ab)}else s=n.za.call(e);r.na&&!n.Nb?(e=o.call(t,r))?e.push(s):i.call(t,r,[s]):i.call(t,r,s)}else e.C()},dt.getField=vt,dt.getRepeatedField=function(t,e){return vt(t,e)},dt.getOptionalFloatingPointField=wt,dt.getBooleanField=_t,dt.getRepeatedFloatingPointField=function(t,e){var r=vt(t,e);if(t.a||(t.a={}),!t.a[e]){for(var o=0;o<r.length;o++)r[o]=+r[o];t.a[e]=!0}return r},dt.getRepeatedBooleanField=function(t,e){var r=vt(t,e);if(t.a||(t.a={}),!t.a[e]){for(var o=0;o<r.length;o++)r[o]=!!r[o];t.a[e]=!0}return r},dt.bytesAsB64=St,dt.bytesAsU8=Et,dt.bytesListAsB64=function(t){return Ot(t),t.length&&"string"!=typeof t[0]?y(t,St):t},dt.bytesListAsU8=function(t){return Ot(t),!t.length||t[0]instanceof Uint8Array?t:y(t,Et)},dt.getFieldWithDefault=Ft,dt.getBooleanFieldWithDefault=function(t,e,r){return null==(t=_t(t,e))?r:t},dt.getFloatingPointFieldWithDefault=function(t,e,r){return null==(t=wt(t,e))?r:t},dt.getFieldProto3=Ft,dt.getMapField=function(t,e,r,o){if(t.f||(t.f={}),e in t.f)return t.f[e];var i=vt(t,e);if(!i){if(r)return;Rt(t,e,i=[])}return t.f[e]=new S(i,o)},dt.setField=Rt,dt.setProto3IntField=function(t,e,r){return Tt(t,e,r,0)},dt.setProto3FloatField=function(t,e,r){return Tt(t,e,r,0)},dt.setProto3BooleanField=function(t,e,r){return Tt(t,e,r,!1)},dt.setProto3StringField=function(t,e,r){return Tt(t,e,r,"")},dt.setProto3BytesField=function(t,e,r){return Tt(t,e,r,"")},dt.setProto3EnumField=function(t,e,r){return Tt(t,e,r,0)},dt.setProto3StringIntField=function(t,e,r){return Tt(t,e,r,"0")},dt.addToRepeatedField=function(t,e,r,o){return w(t,dt),e=vt(t,e),null!=o?e.splice(o,0,r):e.push(r),t},dt.setOneofField=kt,dt.computeOneofCase=At,dt.getWrapperField=function(t,e,r,o){if(t.f||(t.f={}),!t.f[r]){var i=vt(t,r);(o||i)&&(t.f[r]=new e(i))}return t.f[r]},dt.getRepeatedWrapperField=function(t,e,r){return Pt(t,e,r),(e=t.f[r])==gt&&(e=t.f[r]=[]),e},dt.setWrapperField=function(t,e,r){w(t,dt),t.f||(t.f={});var o=r?r.g():r;return t.f[e]=r,Rt(t,e,o)},dt.setOneofWrapperField=function(t,e,r,o){w(t,dt),t.f||(t.f={});var i=o?o.g():o;return t.f[e]=o,kt(t,e,r,i)},dt.setRepeatedWrapperField=function(t,e,r){w(t,dt),t.f||(t.f={}),r=r||[];for(var o=[],i=0;i<r.length;i++)o[i]=r[i].g();return t.f[e]=r,Rt(t,e,o)},dt.addToRepeatedWrapperField=function(t,e,r,o,i){Pt(t,o,e);var n=t.f[e];return n||(n=t.f[e]=[]),r=r||new o,t=vt(t,e),null!=i?(n.splice(i,0,r),t.splice(i,0,r.g())):(n.push(r),t.push(r.g())),r},dt.toMap=function(t,e,r,o){for(var i={},n=0;n<t.length;n++)i[e.call(t[n])]=r?r.call(t[n],o,t[n]):t[n];return i},dt.prototype.g=function(){return Nt(this),this.u},dt.prototype.toArray=dt.prototype.g,dt.prototype.toString=function(){return Nt(this),this.u.toString()},dt.prototype.getExtension=function(t){if(this.i){this.f||(this.f={});var e=t.ma;if(t.na){if(t.F())return this.f[e]||(this.f[e]=y(this.i[e]||[],(function(e){return new t.la(e)}))),this.f[e]}else if(t.F())return!this.f[e]&&this.i[e]&&(this.f[e]=new t.la(this.i[e])),this.f[e];return this.i[e]}},dt.prototype.getExtension=dt.prototype.getExtension,dt.prototype.Kc=function(t,e){this.f||(this.f={}),mt(this);var r=t.ma;return t.na?(e=e||[],t.F()?(this.f[r]=e,this.i[r]=y(e,(function(t){return t.g()}))):this.i[r]=e):t.F()?(this.f[r]=e,this.i[r]=e?e.g():e):this.i[r]=e,this},dt.prototype.setExtension=dt.prototype.Kc,dt.difference=function(t,e){if(!(t instanceof e.constructor))throw Error("Messages have different types.");var r=t.g();e=e.g();var o=[],i=0,n=r.length>e.length?r.length:e.length;for(t.b&&(o[0]=t.b,i=1);i<n;i++)Ct(r[i],e[i])||(o[i]=e[i]);return new t.constructor(o)},dt.equals=function(t,e){return t==e||!(!t||!e)&&t instanceof e.constructor&&Ct(t.g(),e.g())},dt.compareExtensions=It,dt.compareFields=Ct,dt.prototype.Bb=function(){return Bt(this)},dt.prototype.cloneMessage=dt.prototype.Bb,dt.prototype.clone=function(){return Bt(this)},dt.prototype.clone=dt.prototype.clone,dt.clone=function(t){return Bt(t)},dt.copyInto=function(t,e){w(t,dt),w(e,dt),b(t.constructor==e.constructor,"Copy source and target message should have the same type."),t=Bt(t);for(var r=e.g(),o=t.g(),i=r.length=0;i<o.length;i++)r[i]=o[i];e.f=t.f,e.i=t.i},dt.registerMessageType=function(t,e){e.we=t};var jt={dump:function(t){return w(t,dt,"jspb.Message instance expected"),b(t.getExtension,"Only unobfuscated and unoptimized compilation modes supported."),jt.X(t)}};function Dt(){this.a=[]}function Lt(t,e){this.lo=t,this.hi=e}function Mt(t,e){var r=65535&t,o=65535&e,i=e>>>16;for(e=r*o+65536*(r*i&65535)+65536*((t>>>=16)*o&65535),r=t*i+(r*i>>>16)+(t*o>>>16);4294967296<=e;)e-=4294967296,r+=1;return new Lt(e>>>0,r>>>0)}function Ut(t){for(var e=new Lt(0,0),r=new Lt(0,0),o=0;o<t.length;o++){if("0">t[o]||"9"<t[o])return null;r.lo=parseInt(t[o],10),e=e.eb(10).add(r)}return e}function Wt(t,e){this.lo=t,this.hi=e}function $t(t){var e=0<t.length&&"-"==t[0];return e&&(t=t.substring(1)),null===(t=Ut(t))?null:(e&&(t=new Lt(0,0).sub(t)),new Wt(t.lo,t.hi))}function Vt(){this.c=[],this.b=0,this.a=new Dt,this.h=[]}function zt(t,e){var r=t.a.end();t.c.push(r),t.c.push(e),t.b+=r.length+e.length}function Gt(t,e){return qt(t,e,2),e=t.a.end(),t.c.push(e),t.b+=e.length,e.push(t.b),e}function Ht(t,e){var r=e.pop();for(b(0<=(r=t.b+t.a.length()-r));127<r;)e.push(127&r|128),r>>>=7,t.b++;e.push(r),t.b++}function qt(t,e,r){b(1<=e&&e==Math.floor(e)),t.a.j(8*e+r)}function Kt(t,e,r){null!=r&&(qt(t,e,0),t.a.j(r))}function Yt(t,e,r){null!=r&&(qt(t,e,0),t.a.M(r))}u("jspb.debug.dump",jt.dump,void 0),jt.X=function(t){var e=h(t);if("number"==e||"string"==e||"boolean"==e||"null"==e||"undefined"==e||"undefined"!=typeof Uint8Array&&t instanceof Uint8Array)return t;if("array"==e)return function(t,e,r){for(var o=[],i=2;i<arguments.length;++i)o[i-2]=arguments[i];Array.isArray(t)||m("Expected array but got %s: %s.",[h(t),t],e,o)}(t),y(t,jt.X);if(t instanceof S){for(var r={},o=(t=t.entries()).next();!o.done;o=t.next())r[o.value[0]]=jt.X(o.value[1]);return r}w(t,dt,"Only messages expected: "+t);var i={$name:(e=t.constructor).name||e.displayName};for(a in e.prototype){var n=/^get([A-Z]\w*)/.exec(a);if(n&&"getExtension"!=a&&"getJsPbMessageId"!=a){var s="has"+n[1];t[s]&&!t[s]()||(s=t[a](),i[jt.$a(n[1])]=jt.X(s))}}if(t.extensionObject_)return i.$extensions="Recursive dumping of extensions not supported in compiled code. Switch to uncompiled or dump extension object directly",i;for(o in e.extensions)if(/^\d+$/.test(o)){s=e.extensions[o];var a=t.getExtension(s);n=void 0,s=s.Ba;var p=[],c=0;for(n in s)p[c++]=n;n=p[0],null!=a&&(r||(r=i.$extensions={}),r[jt.$a(n)]=jt.X(a))}return i},jt.$a=function(t){return t.replace(/^[A-Z]/,(function(t){return t.toLowerCase()}))},u("jspb.BinaryEncoder",Dt,void 0),Dt.prototype.length=function(){return this.a.length},Dt.prototype.length=Dt.prototype.length,Dt.prototype.end=function(){var t=this.a;return this.a=[],t},Dt.prototype.end=Dt.prototype.end,Dt.prototype.l=function(t,e){for(b(t==Math.floor(t)),b(e==Math.floor(e)),b(0<=t&&4294967296>t),b(0<=e&&4294967296>e);0<e||127<t;)this.a.push(127&t|128),t=(t>>>7|e<<25)>>>0,e>>>=7;this.a.push(t)},Dt.prototype.writeSplitVarint64=Dt.prototype.l,Dt.prototype.A=function(t,e){b(t==Math.floor(t)),b(e==Math.floor(e)),b(0<=t&&4294967296>t),b(0<=e&&4294967296>e),this.s(t),this.s(e)},Dt.prototype.writeSplitFixed64=Dt.prototype.A,Dt.prototype.j=function(t){for(b(t==Math.floor(t)),b(0<=t&&4294967296>t);127<t;)this.a.push(127&t|128),t>>>=7;this.a.push(t)},Dt.prototype.writeUnsignedVarint32=Dt.prototype.j,Dt.prototype.M=function(t){if(b(t==Math.floor(t)),b(-2147483648<=t&&2147483648>t),0<=t)this.j(t);else{for(var e=0;9>e;e++)this.a.push(127&t|128),t>>=7;this.a.push(1)}},Dt.prototype.writeSignedVarint32=Dt.prototype.M,Dt.prototype.va=function(t){b(t==Math.floor(t)),b(0<=t&&0x10000000000000000>t),L(t),this.l(x,j)},Dt.prototype.writeUnsignedVarint64=Dt.prototype.va,Dt.prototype.ua=function(t){b(t==Math.floor(t)),b(-0x8000000000000000<=t&&0x8000000000000000>t),L(t),this.l(x,j)},Dt.prototype.writeSignedVarint64=Dt.prototype.ua,Dt.prototype.wa=function(t){b(t==Math.floor(t)),b(-2147483648<=t&&2147483648>t),this.j((t<<1^t>>31)>>>0)},Dt.prototype.writeZigzagVarint32=Dt.prototype.wa,Dt.prototype.xa=function(t){b(t==Math.floor(t)),b(-0x8000000000000000<=t&&0x8000000000000000>t),M(t),this.l(x,j)},Dt.prototype.writeZigzagVarint64=Dt.prototype.xa,Dt.prototype.Ta=function(t){this.W(tt(t))},Dt.prototype.writeZigzagVarint64String=Dt.prototype.Ta,Dt.prototype.W=function(t){var e=this;$(t),G(x,j,(function(t,r){e.l(t>>>0,r>>>0)}))},Dt.prototype.writeZigzagVarintHash64=Dt.prototype.W,Dt.prototype.be=function(t){b(t==Math.floor(t)),b(0<=t&&256>t),this.a.push(t>>>0&255)},Dt.prototype.writeUint8=Dt.prototype.be,Dt.prototype.ae=function(t){b(t==Math.floor(t)),b(0<=t&&65536>t),this.a.push(t>>>0&255),this.a.push(t>>>8&255)},Dt.prototype.writeUint16=Dt.prototype.ae,Dt.prototype.s=function(t){b(t==Math.floor(t)),b(0<=t&&4294967296>t),this.a.push(t>>>0&255),this.a.push(t>>>8&255),this.a.push(t>>>16&255),this.a.push(t>>>24&255)},Dt.prototype.writeUint32=Dt.prototype.s,Dt.prototype.V=function(t){b(t==Math.floor(t)),b(0<=t&&0x10000000000000000>t),D(t),this.s(x),this.s(j)},Dt.prototype.writeUint64=Dt.prototype.V,Dt.prototype.Qc=function(t){b(t==Math.floor(t)),b(-128<=t&&128>t),this.a.push(t>>>0&255)},Dt.prototype.writeInt8=Dt.prototype.Qc,Dt.prototype.Pc=function(t){b(t==Math.floor(t)),b(-32768<=t&&32768>t),this.a.push(t>>>0&255),this.a.push(t>>>8&255)},Dt.prototype.writeInt16=Dt.prototype.Pc,Dt.prototype.S=function(t){b(t==Math.floor(t)),b(-2147483648<=t&&2147483648>t),this.a.push(t>>>0&255),this.a.push(t>>>8&255),this.a.push(t>>>16&255),this.a.push(t>>>24&255)},Dt.prototype.writeInt32=Dt.prototype.S,Dt.prototype.T=function(t){b(t==Math.floor(t)),b(-0x8000000000000000<=t&&0x8000000000000000>t),L(t),this.A(x,j)},Dt.prototype.writeInt64=Dt.prototype.T,Dt.prototype.ka=function(t){b(t==Math.floor(t)),b(-0x8000000000000000<=+t&&0x8000000000000000>+t),$(tt(t)),this.A(x,j)},Dt.prototype.writeInt64String=Dt.prototype.ka,Dt.prototype.L=function(t){b(1/0===t||-1/0===t||isNaN(t)||-34028234663852886e22<=t&&34028234663852886e22>=t),U(t),this.s(x)},Dt.prototype.writeFloat=Dt.prototype.L,Dt.prototype.J=function(t){b(1/0===t||-1/0===t||isNaN(t)||-17976931348623157e292<=t&&17976931348623157e292>=t),W(t),this.s(x),this.s(j)},Dt.prototype.writeDouble=Dt.prototype.J,Dt.prototype.I=function(t){b("boolean"==typeof t||"number"==typeof t),this.a.push(t?1:0)},Dt.prototype.writeBool=Dt.prototype.I,Dt.prototype.R=function(t){b(t==Math.floor(t)),b(-2147483648<=t&&2147483648>t),this.M(t)},Dt.prototype.writeEnum=Dt.prototype.R,Dt.prototype.ja=function(t){this.a.push.apply(this.a,t)},Dt.prototype.writeBytes=Dt.prototype.ja,Dt.prototype.N=function(t){$(t),this.l(x,j)},Dt.prototype.writeVarintHash64=Dt.prototype.N,Dt.prototype.K=function(t){$(t),this.s(x),this.s(j)},Dt.prototype.writeFixedHash64=Dt.prototype.K,Dt.prototype.U=function(t){var e=this.a.length;!function(t,e,r){for(var o=[],i=2;i<arguments.length;++i)o[i-2]=arguments[i];"string"!=typeof t&&m("Expected string but got %s: %s.",[h(t),t],e,o)}(t);for(var r=0;r<t.length;r++){var o=t.charCodeAt(r);if(128>o)this.a.push(o);else if(2048>o)this.a.push(o>>6|192),this.a.push(63&o|128);else if(65536>o)if(55296<=o&&56319>=o&&r+1<t.length){var i=t.charCodeAt(r+1);56320<=i&&57343>=i&&(o=1024*(o-55296)+i-56320+65536,this.a.push(o>>18|240),this.a.push(o>>12&63|128),this.a.push(o>>6&63|128),this.a.push(63&o|128),r++)}else this.a.push(o>>12|224),this.a.push(o>>6&63|128),this.a.push(63&o|128)}return this.a.length-e},Dt.prototype.writeString=Dt.prototype.U,u("jspb.arith.UInt64",Lt,void 0),Lt.prototype.cmp=function(t){return this.hi<t.hi||this.hi==t.hi&&this.lo<t.lo?-1:this.hi==t.hi&&this.lo==t.lo?0:1},Lt.prototype.cmp=Lt.prototype.cmp,Lt.prototype.La=function(){return new Lt((this.lo>>>1|(1&this.hi)<<31)>>>0,this.hi>>>1>>>0)},Lt.prototype.rightShift=Lt.prototype.La,Lt.prototype.Da=function(){return new Lt(this.lo<<1>>>0,(this.hi<<1|this.lo>>>31)>>>0)},Lt.prototype.leftShift=Lt.prototype.Da,Lt.prototype.cb=function(){return!!(2147483648&this.hi)},Lt.prototype.msb=Lt.prototype.cb,Lt.prototype.Ob=function(){return!!(1&this.lo)},Lt.prototype.lsb=Lt.prototype.Ob,Lt.prototype.Ua=function(){return 0==this.lo&&0==this.hi},Lt.prototype.zero=Lt.prototype.Ua,Lt.prototype.add=function(t){return new Lt((this.lo+t.lo&4294967295)>>>0>>>0,((this.hi+t.hi&4294967295)>>>0)+(4294967296<=this.lo+t.lo?1:0)>>>0)},Lt.prototype.add=Lt.prototype.add,Lt.prototype.sub=function(t){return new Lt((this.lo-t.lo&4294967295)>>>0>>>0,((this.hi-t.hi&4294967295)>>>0)-(0>this.lo-t.lo?1:0)>>>0)},Lt.prototype.sub=Lt.prototype.sub,Lt.mul32x32=Mt,Lt.prototype.eb=function(t){var e=Mt(this.lo,t);return(t=Mt(this.hi,t)).hi=t.lo,t.lo=0,e.add(t)},Lt.prototype.mul=Lt.prototype.eb,Lt.prototype.Xa=function(t){if(0==t)return[];var e=new Lt(0,0),r=new Lt(this.lo,this.hi);t=new Lt(t,0);for(var o=new Lt(1,0);!t.cb();)t=t.Da(),o=o.Da();for(;!o.Ua();)0>=t.cmp(r)&&(e=e.add(o),r=r.sub(t)),t=t.La(),o=o.La();return[e,r]},Lt.prototype.div=Lt.prototype.Xa,Lt.prototype.toString=function(){for(var t="",e=this;!e.Ua();){var r=(e=e.Xa(10))[0];t=e[1].lo+t,e=r}return""==t&&(t="0"),t},Lt.prototype.toString=Lt.prototype.toString,Lt.fromString=Ut,Lt.prototype.clone=function(){return new Lt(this.lo,this.hi)},Lt.prototype.clone=Lt.prototype.clone,u("jspb.arith.Int64",Wt,void 0),Wt.prototype.add=function(t){return new Wt((this.lo+t.lo&4294967295)>>>0>>>0,((this.hi+t.hi&4294967295)>>>0)+(4294967296<=this.lo+t.lo?1:0)>>>0)},Wt.prototype.add=Wt.prototype.add,Wt.prototype.sub=function(t){return new Wt((this.lo-t.lo&4294967295)>>>0>>>0,((this.hi-t.hi&4294967295)>>>0)-(0>this.lo-t.lo?1:0)>>>0)},Wt.prototype.sub=Wt.prototype.sub,Wt.prototype.clone=function(){return new Wt(this.lo,this.hi)},Wt.prototype.clone=Wt.prototype.clone,Wt.prototype.toString=function(){var t=!!(2147483648&this.hi),e=new Lt(this.lo,this.hi);return t&&(e=new Lt(0,0).sub(e)),(t?"-":"")+e.toString()},Wt.prototype.toString=Wt.prototype.toString,Wt.fromString=$t,u("jspb.BinaryWriter",Vt,void 0),Vt.prototype.pb=function(t,e,r){zt(this,t.subarray(e,r))},Vt.prototype.writeSerializedMessage=Vt.prototype.pb,Vt.prototype.Pb=function(t,e,r){null!=t&&null!=e&&null!=r&&this.pb(t,e,r)},Vt.prototype.maybeWriteSerializedMessage=Vt.prototype.Pb,Vt.prototype.reset=function(){this.c=[],this.a.end(),this.b=0,this.h=[]},Vt.prototype.reset=Vt.prototype.reset,Vt.prototype.ab=function(){b(0==this.h.length);for(var t=new Uint8Array(this.b+this.a.length()),e=this.c,r=e.length,o=0,i=0;i<r;i++){var n=e[i];t.set(n,o),o+=n.length}return e=this.a.end(),t.set(e,o),b((o+=e.length)==t.length),this.c=[t],t},Vt.prototype.getResultBuffer=Vt.prototype.ab,Vt.prototype.Kb=function(t){return I(this.ab(),t)},Vt.prototype.getResultBase64String=Vt.prototype.Kb,Vt.prototype.Va=function(t){this.h.push(Gt(this,t))},Vt.prototype.beginSubMessage=Vt.prototype.Va,Vt.prototype.Ya=function(){b(0<=this.h.length),Ht(this,this.h.pop())},Vt.prototype.endSubMessage=Vt.prototype.Ya,Vt.prototype.Nc=function(t,e,r){switch(t){case 1:this.J(e,r);break;case 2:this.L(e,r);break;case 3:this.T(e,r);break;case 4:this.V(e,r);break;case 5:this.S(e,r);break;case 6:this.Qa(e,r);break;case 7:this.Pa(e,r);break;case 8:this.I(e,r);break;case 9:this.U(e,r);break;case 10:v("Group field type not supported in writeAny()");break;case 11:v("Message field type not supported in writeAny()");break;case 12:this.ja(e,r);break;case 13:this.s(e,r);break;case 14:this.R(e,r);break;case 15:this.Ra(e,r);break;case 16:this.Sa(e,r);break;case 17:this.rb(e,r);break;case 18:this.sb(e,r);break;case 30:this.K(e,r);break;case 31:this.N(e,r);break;default:v("Invalid field type in writeAny()")}},Vt.prototype.writeAny=Vt.prototype.Nc,Vt.prototype.S=function(t,e){null!=e&&(b(-2147483648<=e&&2147483648>e),Yt(this,t,e))},Vt.prototype.writeInt32=Vt.prototype.S,Vt.prototype.ob=function(t,e){null!=e&&(b(-2147483648<=(e=parseInt(e,10))&&2147483648>e),Yt(this,t,e))},Vt.prototype.writeInt32String=Vt.prototype.ob,Vt.prototype.T=function(t,e){null!=e&&(b(-0x8000000000000000<=e&&0x8000000000000000>e),null!=e&&(qt(this,t,0),this.a.ua(e)))},Vt.prototype.writeInt64=Vt.prototype.T,Vt.prototype.ka=function(t,e){null!=e&&(e=$t(e),qt(this,t,0),this.a.l(e.lo,e.hi))},Vt.prototype.writeInt64String=Vt.prototype.ka,Vt.prototype.s=function(t,e){null!=e&&(b(0<=e&&4294967296>e),Kt(this,t,e))},Vt.prototype.writeUint32=Vt.prototype.s,Vt.prototype.ub=function(t,e){null!=e&&(b(0<=(e=parseInt(e,10))&&4294967296>e),Kt(this,t,e))},Vt.prototype.writeUint32String=Vt.prototype.ub,Vt.prototype.V=function(t,e){null!=e&&(b(0<=e&&0x10000000000000000>e),null!=e&&(qt(this,t,0),this.a.va(e)))},Vt.prototype.writeUint64=Vt.prototype.V,Vt.prototype.vb=function(t,e){null!=e&&(e=Ut(e),qt(this,t,0),this.a.l(e.lo,e.hi))},Vt.prototype.writeUint64String=Vt.prototype.vb,Vt.prototype.rb=function(t,e){null!=e&&(b(-2147483648<=e&&2147483648>e),null!=e&&(qt(this,t,0),this.a.wa(e)))},Vt.prototype.writeSint32=Vt.prototype.rb,Vt.prototype.sb=function(t,e){null!=e&&(b(-0x8000000000000000<=e&&0x8000000000000000>e),null!=e&&(qt(this,t,0),this.a.xa(e)))},Vt.prototype.writeSint64=Vt.prototype.sb,Vt.prototype.$d=function(t,e){null!=e&&null!=e&&(qt(this,t,0),this.a.W(e))},Vt.prototype.writeSintHash64=Vt.prototype.$d,Vt.prototype.Zd=function(t,e){null!=e&&null!=e&&(qt(this,t,0),this.a.Ta(e))},Vt.prototype.writeSint64String=Vt.prototype.Zd,Vt.prototype.Pa=function(t,e){null!=e&&(b(0<=e&&4294967296>e),qt(this,t,5),this.a.s(e))},Vt.prototype.writeFixed32=Vt.prototype.Pa,Vt.prototype.Qa=function(t,e){null!=e&&(b(0<=e&&0x10000000000000000>e),qt(this,t,1),this.a.V(e))},Vt.prototype.writeFixed64=Vt.prototype.Qa,Vt.prototype.nb=function(t,e){null!=e&&(e=Ut(e),qt(this,t,1),this.a.A(e.lo,e.hi))},Vt.prototype.writeFixed64String=Vt.prototype.nb,Vt.prototype.Ra=function(t,e){null!=e&&(b(-2147483648<=e&&2147483648>e),qt(this,t,5),this.a.S(e))},Vt.prototype.writeSfixed32=Vt.prototype.Ra,Vt.prototype.Sa=function(t,e){null!=e&&(b(-0x8000000000000000<=e&&0x8000000000000000>e),qt(this,t,1),this.a.T(e))},Vt.prototype.writeSfixed64=Vt.prototype.Sa,Vt.prototype.qb=function(t,e){null!=e&&(e=$t(e),qt(this,t,1),this.a.A(e.lo,e.hi))},Vt.prototype.writeSfixed64String=Vt.prototype.qb,Vt.prototype.L=function(t,e){null!=e&&(qt(this,t,5),this.a.L(e))},Vt.prototype.writeFloat=Vt.prototype.L,Vt.prototype.J=function(t,e){null!=e&&(qt(this,t,1),this.a.J(e))},Vt.prototype.writeDouble=Vt.prototype.J,Vt.prototype.I=function(t,e){null!=e&&(b("boolean"==typeof e||"number"==typeof e),qt(this,t,0),this.a.I(e))},Vt.prototype.writeBool=Vt.prototype.I,Vt.prototype.R=function(t,e){null!=e&&(b(-2147483648<=e&&2147483648>e),qt(this,t,0),this.a.M(e))},Vt.prototype.writeEnum=Vt.prototype.R,Vt.prototype.U=function(t,e){null!=e&&(t=Gt(this,t),this.a.U(e),Ht(this,t))},Vt.prototype.writeString=Vt.prototype.U,Vt.prototype.ja=function(t,e){null!=e&&(e=it(e),qt(this,t,2),this.a.j(e.length),zt(this,e))},Vt.prototype.writeBytes=Vt.prototype.ja,Vt.prototype.Rc=function(t,e,r){null!=e&&(t=Gt(this,t),r(e,this),Ht(this,t))},Vt.prototype.writeMessage=Vt.prototype.Rc,Vt.prototype.Sc=function(t,e,r){null!=e&&(qt(this,1,3),qt(this,2,0),this.a.M(t),t=Gt(this,3),r(e,this),Ht(this,t),qt(this,1,4))},Vt.prototype.writeMessageSet=Vt.prototype.Sc,Vt.prototype.Oc=function(t,e,r){null!=e&&(qt(this,t,3),r(e,this),qt(this,t,4))},Vt.prototype.writeGroup=Vt.prototype.Oc,Vt.prototype.K=function(t,e){null!=e&&(b(8==e.length),qt(this,t,1),this.a.K(e))},Vt.prototype.writeFixedHash64=Vt.prototype.K,Vt.prototype.N=function(t,e){null!=e&&(b(8==e.length),qt(this,t,0),this.a.N(e))},Vt.prototype.writeVarintHash64=Vt.prototype.N,Vt.prototype.A=function(t,e,r){qt(this,t,1),this.a.A(e,r)},Vt.prototype.writeSplitFixed64=Vt.prototype.A,Vt.prototype.l=function(t,e,r){qt(this,t,0),this.a.l(e,r)},Vt.prototype.writeSplitVarint64=Vt.prototype.l,Vt.prototype.tb=function(t,e,r){qt(this,t,0);var o=this.a;G(e,r,(function(t,e){o.l(t>>>0,e>>>0)}))},Vt.prototype.writeSplitZigzagVarint64=Vt.prototype.tb,Vt.prototype.Ed=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)Yt(this,t,e[r])},Vt.prototype.writeRepeatedInt32=Vt.prototype.Ed,Vt.prototype.Fd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.ob(t,e[r])},Vt.prototype.writeRepeatedInt32String=Vt.prototype.Fd,Vt.prototype.Gd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++){var o=e[r];null!=o&&(qt(this,t,0),this.a.ua(o))}},Vt.prototype.writeRepeatedInt64=Vt.prototype.Gd,Vt.prototype.Qd=function(t,e,r,o){if(null!=e)for(var i=0;i<e.length;i++)this.A(t,r(e[i]),o(e[i]))},Vt.prototype.writeRepeatedSplitFixed64=Vt.prototype.Qd,Vt.prototype.Rd=function(t,e,r,o){if(null!=e)for(var i=0;i<e.length;i++)this.l(t,r(e[i]),o(e[i]))},Vt.prototype.writeRepeatedSplitVarint64=Vt.prototype.Rd,Vt.prototype.Sd=function(t,e,r,o){if(null!=e)for(var i=0;i<e.length;i++)this.tb(t,r(e[i]),o(e[i]))},Vt.prototype.writeRepeatedSplitZigzagVarint64=Vt.prototype.Sd,Vt.prototype.Hd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.ka(t,e[r])},Vt.prototype.writeRepeatedInt64String=Vt.prototype.Hd,Vt.prototype.Ud=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)Kt(this,t,e[r])},Vt.prototype.writeRepeatedUint32=Vt.prototype.Ud,Vt.prototype.Vd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.ub(t,e[r])},Vt.prototype.writeRepeatedUint32String=Vt.prototype.Vd,Vt.prototype.Wd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++){var o=e[r];null!=o&&(qt(this,t,0),this.a.va(o))}},Vt.prototype.writeRepeatedUint64=Vt.prototype.Wd,Vt.prototype.Xd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.vb(t,e[r])},Vt.prototype.writeRepeatedUint64String=Vt.prototype.Xd,Vt.prototype.Md=function(t,e){if(null!=e)for(var r=0;r<e.length;r++){var o=e[r];null!=o&&(qt(this,t,0),this.a.wa(o))}},Vt.prototype.writeRepeatedSint32=Vt.prototype.Md,Vt.prototype.Nd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++){var o=e[r];null!=o&&(qt(this,t,0),this.a.xa(o))}},Vt.prototype.writeRepeatedSint64=Vt.prototype.Nd,Vt.prototype.Od=function(t,e){if(null!=e)for(var r=0;r<e.length;r++){var o=e[r];null!=o&&(qt(this,t,0),this.a.Ta(o))}},Vt.prototype.writeRepeatedSint64String=Vt.prototype.Od,Vt.prototype.Pd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++){var o=e[r];null!=o&&(qt(this,t,0),this.a.W(o))}},Vt.prototype.writeRepeatedSintHash64=Vt.prototype.Pd,Vt.prototype.yd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.Pa(t,e[r])},Vt.prototype.writeRepeatedFixed32=Vt.prototype.yd,Vt.prototype.zd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.Qa(t,e[r])},Vt.prototype.writeRepeatedFixed64=Vt.prototype.zd,Vt.prototype.Ad=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.nb(t,e[r])},Vt.prototype.writeRepeatedFixed64String=Vt.prototype.Ad,Vt.prototype.Jd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.Ra(t,e[r])},Vt.prototype.writeRepeatedSfixed32=Vt.prototype.Jd,Vt.prototype.Kd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.Sa(t,e[r])},Vt.prototype.writeRepeatedSfixed64=Vt.prototype.Kd,Vt.prototype.Ld=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.qb(t,e[r])},Vt.prototype.writeRepeatedSfixed64String=Vt.prototype.Ld,Vt.prototype.Cd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.L(t,e[r])},Vt.prototype.writeRepeatedFloat=Vt.prototype.Cd,Vt.prototype.wd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.J(t,e[r])},Vt.prototype.writeRepeatedDouble=Vt.prototype.wd,Vt.prototype.ud=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.I(t,e[r])},Vt.prototype.writeRepeatedBool=Vt.prototype.ud,Vt.prototype.xd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.R(t,e[r])},Vt.prototype.writeRepeatedEnum=Vt.prototype.xd,Vt.prototype.Td=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.U(t,e[r])},Vt.prototype.writeRepeatedString=Vt.prototype.Td,Vt.prototype.vd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.ja(t,e[r])},Vt.prototype.writeRepeatedBytes=Vt.prototype.vd,Vt.prototype.Id=function(t,e,r){if(null!=e)for(var o=0;o<e.length;o++){var i=Gt(this,t);r(e[o],this),Ht(this,i)}},Vt.prototype.writeRepeatedMessage=Vt.prototype.Id,Vt.prototype.Dd=function(t,e,r){if(null!=e)for(var o=0;o<e.length;o++)qt(this,t,3),r(e[o],this),qt(this,t,4)},Vt.prototype.writeRepeatedGroup=Vt.prototype.Dd,Vt.prototype.Bd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.K(t,e[r])},Vt.prototype.writeRepeatedFixedHash64=Vt.prototype.Bd,Vt.prototype.Yd=function(t,e){if(null!=e)for(var r=0;r<e.length;r++)this.N(t,e[r])},Vt.prototype.writeRepeatedVarintHash64=Vt.prototype.Yd,Vt.prototype.ad=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++)this.a.M(e[r]);Ht(this,t)}},Vt.prototype.writePackedInt32=Vt.prototype.ad,Vt.prototype.bd=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++)this.a.M(parseInt(e[r],10));Ht(this,t)}},Vt.prototype.writePackedInt32String=Vt.prototype.bd,Vt.prototype.cd=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++)this.a.ua(e[r]);Ht(this,t)}},Vt.prototype.writePackedInt64=Vt.prototype.cd,Vt.prototype.md=function(t,e,r,o){if(null!=e){t=Gt(this,t);for(var i=0;i<e.length;i++)this.a.A(r(e[i]),o(e[i]));Ht(this,t)}},Vt.prototype.writePackedSplitFixed64=Vt.prototype.md,Vt.prototype.nd=function(t,e,r,o){if(null!=e){t=Gt(this,t);for(var i=0;i<e.length;i++)this.a.l(r(e[i]),o(e[i]));Ht(this,t)}},Vt.prototype.writePackedSplitVarint64=Vt.prototype.nd,Vt.prototype.od=function(t,e,r,o){if(null!=e){t=Gt(this,t);for(var i=this.a,n=0;n<e.length;n++)G(r(e[n]),o(e[n]),(function(t,e){i.l(t>>>0,e>>>0)}));Ht(this,t)}},Vt.prototype.writePackedSplitZigzagVarint64=Vt.prototype.od,Vt.prototype.dd=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++){var o=$t(e[r]);this.a.l(o.lo,o.hi)}Ht(this,t)}},Vt.prototype.writePackedInt64String=Vt.prototype.dd,Vt.prototype.pd=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++)this.a.j(e[r]);Ht(this,t)}},Vt.prototype.writePackedUint32=Vt.prototype.pd,Vt.prototype.qd=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++)this.a.j(parseInt(e[r],10));Ht(this,t)}},Vt.prototype.writePackedUint32String=Vt.prototype.qd,Vt.prototype.rd=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++)this.a.va(e[r]);Ht(this,t)}},Vt.prototype.writePackedUint64=Vt.prototype.rd,Vt.prototype.sd=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++){var o=Ut(e[r]);this.a.l(o.lo,o.hi)}Ht(this,t)}},Vt.prototype.writePackedUint64String=Vt.prototype.sd,Vt.prototype.hd=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++)this.a.wa(e[r]);Ht(this,t)}},Vt.prototype.writePackedSint32=Vt.prototype.hd,Vt.prototype.jd=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++)this.a.xa(e[r]);Ht(this,t)}},Vt.prototype.writePackedSint64=Vt.prototype.jd,Vt.prototype.kd=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++)this.a.W(tt(e[r]));Ht(this,t)}},Vt.prototype.writePackedSint64String=Vt.prototype.kd,Vt.prototype.ld=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++)this.a.W(e[r]);Ht(this,t)}},Vt.prototype.writePackedSintHash64=Vt.prototype.ld,Vt.prototype.Wc=function(t,e){if(null!=e&&e.length)for(qt(this,t,2),this.a.j(4*e.length),t=0;t<e.length;t++)this.a.s(e[t])},Vt.prototype.writePackedFixed32=Vt.prototype.Wc,Vt.prototype.Xc=function(t,e){if(null!=e&&e.length)for(qt(this,t,2),this.a.j(8*e.length),t=0;t<e.length;t++)this.a.V(e[t])},Vt.prototype.writePackedFixed64=Vt.prototype.Xc,Vt.prototype.Yc=function(t,e){if(null!=e&&e.length)for(qt(this,t,2),this.a.j(8*e.length),t=0;t<e.length;t++){var r=Ut(e[t]);this.a.A(r.lo,r.hi)}},Vt.prototype.writePackedFixed64String=Vt.prototype.Yc,Vt.prototype.ed=function(t,e){if(null!=e&&e.length)for(qt(this,t,2),this.a.j(4*e.length),t=0;t<e.length;t++)this.a.S(e[t])},Vt.prototype.writePackedSfixed32=Vt.prototype.ed,Vt.prototype.fd=function(t,e){if(null!=e&&e.length)for(qt(this,t,2),this.a.j(8*e.length),t=0;t<e.length;t++)this.a.T(e[t])},Vt.prototype.writePackedSfixed64=Vt.prototype.fd,Vt.prototype.gd=function(t,e){if(null!=e&&e.length)for(qt(this,t,2),this.a.j(8*e.length),t=0;t<e.length;t++)this.a.ka(e[t])},Vt.prototype.writePackedSfixed64String=Vt.prototype.gd,Vt.prototype.$c=function(t,e){if(null!=e&&e.length)for(qt(this,t,2),this.a.j(4*e.length),t=0;t<e.length;t++)this.a.L(e[t])},Vt.prototype.writePackedFloat=Vt.prototype.$c,Vt.prototype.Uc=function(t,e){if(null!=e&&e.length)for(qt(this,t,2),this.a.j(8*e.length),t=0;t<e.length;t++)this.a.J(e[t])},Vt.prototype.writePackedDouble=Vt.prototype.Uc,Vt.prototype.Tc=function(t,e){if(null!=e&&e.length)for(qt(this,t,2),this.a.j(e.length),t=0;t<e.length;t++)this.a.I(e[t])},Vt.prototype.writePackedBool=Vt.prototype.Tc,Vt.prototype.Vc=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++)this.a.R(e[r]);Ht(this,t)}},Vt.prototype.writePackedEnum=Vt.prototype.Vc,Vt.prototype.Zc=function(t,e){if(null!=e&&e.length)for(qt(this,t,2),this.a.j(8*e.length),t=0;t<e.length;t++)this.a.K(e[t])},Vt.prototype.writePackedFixedHash64=Vt.prototype.Zc,Vt.prototype.td=function(t,e){if(null!=e&&e.length){t=Gt(this,t);for(var r=0;r<e.length;r++)this.a.N(e[r]);Ht(this,t)}},Vt.prototype.writePackedVarintHash64=Vt.prototype.td,t.debug=jt,t.Map=S,t.Message=dt,t.BinaryReader=pt,t.BinaryWriter=Vt,t.ExtensionFieldInfo=lt,t.ExtensionFieldBinaryInfo=ft,t.exportSymbol=function(t,e,r){u(t,e,r)},t.inherits=function(t,e){function r(){}r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t},t.object={extend:function(t,e){for(var r,o,i=1;i<arguments.length;i++){for(r in o=arguments[i])t[r]=o[r];for(var n=0;n<f.length;n++)r=f[n],Object.prototype.hasOwnProperty.call(o,r)&&(t[r]=o[r])}}},t.typeOf=h}(p),function(t){!function(t){var e,o,n,s=function(t){function o(r){var o=t.call(this)||this;return e.set(o,[]),p.Message.initialize(o,Array.isArray(r)?r:[],0,-1,[],i(o,e,"f")),Array.isArray(r)||"object"!=typeof r||("path"in r&&null!=r.path&&(o.path=r.path),"digest"in r&&null!=r.digest&&(o.digest=r.digest)),o}return r(o,t),Object.defineProperty(o.prototype,"path",{get:function(){return p.Message.getFieldWithDefault(this,1,"")},set:function(t){p.Message.setField(this,1,t)},enumerable:!1,configurable:!0}),Object.defineProperty(o.prototype,"digest",{get:function(){return p.Message.getFieldWithDefault(this,2,new Uint8Array(0))},set:function(t){p.Message.setField(this,2,t)},enumerable:!1,configurable:!0}),o.fromObject=function(t){var e=new o({});return null!=t.path&&(e.path=t.path),null!=t.digest&&(e.digest=t.digest),e},o.prototype.toObject=function(){var t={};return null!=this.path&&(t.path=this.path),null!=this.digest&&(t.digest=this.digest),t},o.prototype.serialize=function(t){var e=t||new p.BinaryWriter;if(this.path.length&&e.writeString(1,this.path),this.digest.length&&e.writeBytes(2,this.digest),!t)return e.getResultBuffer()},o.deserialize=function(t){for(var e=t instanceof p.BinaryReader?t:new p.BinaryReader(t),r=new o;e.nextField()&&!e.isEndGroup();)switch(e.getFieldNumber()){case 1:r.path=e.readString();break;case 2:r.digest=e.readBytes();break;default:e.skipField()}return r},o.prototype.serializeBinary=function(){return this.serialize()},o.deserializeBinary=function(t){return o.deserialize(t)},o}(p.Message);e=new WeakMap,t.Input=s;var a=function(t){function e(e){var r=t.call(this)||this;return o.set(r,[]),p.Message.initialize(r,Array.isArray(e)?e:[],0,-1,[1,2],i(r,o,"f")),Array.isArray(e)||"object"!=typeof e||("arguments"in e&&null!=e.arguments&&(r.arguments=e.arguments),"inputs"in e&&null!=e.inputs&&(r.inputs=e.inputs),"request_id"in e&&null!=e.request_id&&(r.request_id=e.request_id),"cancel"in e&&null!=e.cancel&&(r.cancel=e.cancel),"verbosity"in e&&null!=e.verbosity&&(r.verbosity=e.verbosity),"sandbox_dir"in e&&null!=e.sandbox_dir&&(r.sandbox_dir=e.sandbox_dir)),r}return r(e,t),Object.defineProperty(e.prototype,"arguments",{get:function(){return p.Message.getFieldWithDefault(this,1,[])},set:function(t){p.Message.setField(this,1,t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"inputs",{get:function(){return p.Message.getRepeatedWrapperField(this,s,2)},set:function(t){p.Message.setRepeatedWrapperField(this,2,t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"request_id",{get:function(){return p.Message.getFieldWithDefault(this,3,0)},set:function(t){p.Message.setField(this,3,t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"cancel",{get:function(){return p.Message.getFieldWithDefault(this,4,!1)},set:function(t){p.Message.setField(this,4,t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"verbosity",{get:function(){return p.Message.getFieldWithDefault(this,5,0)},set:function(t){p.Message.setField(this,5,t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"sandbox_dir",{get:function(){return p.Message.getFieldWithDefault(this,6,"")},set:function(t){p.Message.setField(this,6,t)},enumerable:!1,configurable:!0}),e.fromObject=function(t){var r=new e({});return null!=t.arguments&&(r.arguments=t.arguments),null!=t.inputs&&(r.inputs=t.inputs.map((function(t){return s.fromObject(t)}))),null!=t.request_id&&(r.request_id=t.request_id),null!=t.cancel&&(r.cancel=t.cancel),null!=t.verbosity&&(r.verbosity=t.verbosity),null!=t.sandbox_dir&&(r.sandbox_dir=t.sandbox_dir),r},e.prototype.toObject=function(){var t={};return null!=this.arguments&&(t.arguments=this.arguments),null!=this.inputs&&(t.inputs=this.inputs.map((function(t){return t.toObject()}))),null!=this.request_id&&(t.request_id=this.request_id),null!=this.cancel&&(t.cancel=this.cancel),null!=this.verbosity&&(t.verbosity=this.verbosity),null!=this.sandbox_dir&&(t.sandbox_dir=this.sandbox_dir),t},e.prototype.serialize=function(t){var e=t||new p.BinaryWriter;if(this.arguments.length&&e.writeRepeatedString(1,this.arguments),this.inputs.length&&e.writeRepeatedMessage(2,this.inputs,(function(t){return t.serialize(e)})),0!=this.request_id&&e.writeInt32(3,this.request_id),0!=this.cancel&&e.writeBool(4,this.cancel),0!=this.verbosity&&e.writeInt32(5,this.verbosity),this.sandbox_dir.length&&e.writeString(6,this.sandbox_dir),!t)return e.getResultBuffer()},e.deserialize=function(t){for(var r=t instanceof p.BinaryReader?t:new p.BinaryReader(t),o=new e;r.nextField()&&!r.isEndGroup();)switch(r.getFieldNumber()){case 1:p.Message.addToRepeatedField(o,1,r.readString());break;case 2:r.readMessage(o.inputs,(function(){return p.Message.addToRepeatedWrapperField(o,2,s.deserialize(r),s)}));break;case 3:o.request_id=r.readInt32();break;case 4:o.cancel=r.readBool();break;case 5:o.verbosity=r.readInt32();break;case 6:o.sandbox_dir=r.readString();break;default:r.skipField()}return o},e.prototype.serializeBinary=function(){return this.serialize()},e.deserializeBinary=function(t){return e.deserialize(t)},e}(p.Message);o=new WeakMap,t.WorkRequest=a;var c=function(t){function e(e){var r=t.call(this)||this;return n.set(r,[]),p.Message.initialize(r,Array.isArray(e)?e:[],0,-1,[],i(r,n,"f")),Array.isArray(e)||"object"!=typeof e||("exit_code"in e&&null!=e.exit_code&&(r.exit_code=e.exit_code),"output"in e&&null!=e.output&&(r.output=e.output),"request_id"in e&&null!=e.request_id&&(r.request_id=e.request_id),"was_cancelled"in e&&null!=e.was_cancelled&&(r.was_cancelled=e.was_cancelled)),r}return r(e,t),Object.defineProperty(e.prototype,"exit_code",{get:function(){return p.Message.getFieldWithDefault(this,1,0)},set:function(t){p.Message.setField(this,1,t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"output",{get:function(){return p.Message.getFieldWithDefault(this,2,"")},set:function(t){p.Message.setField(this,2,t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"request_id",{get:function(){return p.Message.getFieldWithDefault(this,3,0)},set:function(t){p.Message.setField(this,3,t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"was_cancelled",{get:function(){return p.Message.getFieldWithDefault(this,4,!1)},set:function(t){p.Message.setField(this,4,t)},enumerable:!1,configurable:!0}),e.fromObject=function(t){var r=new e({});return null!=t.exit_code&&(r.exit_code=t.exit_code),null!=t.output&&(r.output=t.output),null!=t.request_id&&(r.request_id=t.request_id),null!=t.was_cancelled&&(r.was_cancelled=t.was_cancelled),r},e.prototype.toObject=function(){var t={};return null!=this.exit_code&&(t.exit_code=this.exit_code),null!=this.output&&(t.output=this.output),null!=this.request_id&&(t.request_id=this.request_id),null!=this.was_cancelled&&(t.was_cancelled=this.was_cancelled),t},e.prototype.serialize=function(t){var e=t||new p.BinaryWriter;if(0!=this.exit_code&&e.writeInt32(1,this.exit_code),this.output.length&&e.writeString(2,this.output),0!=this.request_id&&e.writeInt32(3,this.request_id),0!=this.was_cancelled&&e.writeBool(4,this.was_cancelled),!t)return e.getResultBuffer()},e.deserialize=function(t){for(var r=t instanceof p.BinaryReader?t:new p.BinaryReader(t),o=new e;r.nextField()&&!r.isEndGroup();)switch(r.getFieldNumber()){case 1:o.exit_code=r.readInt32();break;case 2:o.output=r.readString();break;case 3:o.request_id=r.readInt32();break;case 4:o.was_cancelled=r.readBool();break;default:r.skipField()}return o},e.prototype.serializeBinary=function(){return this.serialize()},e.deserializeBinary=function(t){return e.deserialize(t)},e}(p.Message);n=new WeakMap,t.WorkResponse=c}(t.worker||(t.worker={}))}(s||(s={})),Pe.enterWorkerLoop=function(e){var r,i,n,a,p;return function(t,e,r,o){return new(r||(r=Promise))((function(e,i){function n(t){try{a(o.next(t))}catch(t){i(t)}}function s(t){try{a(o.throw(t))}catch(t){i(t)}}function a(t){var o;t.done?e(t.value):(o=t.value,o instanceof r?o:new r((function(t){t(o)}))).then(n,s)}a((o=o.apply(t,[])).next())}))}(this,0,void 0,(function(){var c,u,h,l,f,d,y;return function(t,e){var r,o,i,n={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]},s=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return s.next=a(0),s.throw=a(1),s.return=a(2),"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(a){return function(p){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;s&&(s=0,a[0]&&(n=0)),n;)try{if(r=1,o&&(i=2&a[0]?o.return:a[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,a[1])).done)return i;switch(o=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return n.label++,{value:a[1],done:!1};case 5:n.label++,o=a[1],a=[0];continue;case 7:a=n.ops.pop(),n.trys.pop();continue;default:if(!((i=(i=n.trys).length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){n=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){n.label=a[1];break}if(6===a[0]&&n.label<i[1]){n.label=i[1],i=a;break}if(i&&n.label<i[2]){n.label=i[2],n.ops.push(a);break}i[2]&&n.ops.pop(),n.trys.pop();continue}a=e.call(t,n)}catch(t){a=[6,t],o=0}finally{r=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,p])}}}(this,(function(g){switch(g.label){case 0:c=new Map,u=Buffer.alloc(0),g.label=1;case 1:g.trys.push([1,6,7,12]),h=function(){a=d.value,l=!1;try{var r,o=a,i=Buffer.concat([u,o]),n=function(t){for(var e,r=0,o=0,i=0;i<5&&(r|=(127&(e=t[o++]))<<7*i,128&e);i++);return{size:r,headerSize:o}}(i);if(!(n.size<=i.length+n.headerSize))return u=i,"continue";r=(i=i.slice(n.headerSize)).slice(0,n.size),u=i.slice(n.size);var h=s.worker.WorkRequest.deserialize(r);if(h.cancel)return null===(p=c.get(h.request_id))||void 0===p||p.abort(),"continue";var f=new AbortController;c.set(h.request_id,f);var y=new s.worker.WorkResponse({request_id:h.request_id}),g=new Array,m=new t.Writable({write:function(t,e,r){g.push(Buffer.from(t,e)),null==r||r(void 0)},defaultEncoding:"utf-8"});e({arguments:h.arguments,inputs:h.inputs,request_id:h.request_id,verbosity:h.verbosity,sandbox_dir:h.sandbox_dir,signal:f.signal,output:m}).then((function(t){y.exit_code=t})).catch((function(t){var e;y.exit_code=1,e=String("object"==typeof t&&"stack"in t?t.stack:t),m.write(e),h.verbosity>0&&console.error(e)})).finally((function(){c.delete(h.request_id),m.end(),y.was_cancelled=f.signal.aborted,y.output=Buffer.concat(g).toString("utf-8");var t=y.serialize(),e=function(t){for(var e=Buffer.alloc(10),r=0;t>127;)e[r]=127&t|128,t>>>=7,r++;return e[r]=t,e.slice(0,r+1)}(t.byteLength);process.stdout.write(Buffer.concat([e,t]))}))}finally{l=!0}},l=!0,f=o(process.stdin),g.label=2;case 2:return[4,f.next()];case 3:if(d=g.sent(),r=d.done)return[3,5];h(),g.label=4;case 4:return[3,2];case 5:return[3,12];case 6:return y=g.sent(),i={error:y},[3,12];case 7:return g.trys.push([7,,10,11]),l||r||!(n=f.return)?[3,9]:[4,n.call(f)];case 8:g.sent(),g.label=9;case 9:return[3,11];case 10:if(i)throw i.error;return[7];case 11:return[7];case 12:return[2]}}))}))},Pe.isPersistentWorker=function(t){return-1!==t.indexOf("--persistent_worker")},Pe}());if(!Ne.isPersistentWorker(process.argv)){if(!process.cwd().startsWith("/b/f/w/")&&!process.cwd().includes("sandbox"))throw new Error("It's disallowed to compile outside of sandbox/or outside of a worker.");const t=await ke(function(){const t=process.argv.slice(2).find((t=>t.startsWith("@")));if(void 0!==t){const e=t.split("@")[1],r=n.join(ye,e);return p.readFileSync(r,"utf8").trim().split("\n")}throw new Error("Could not find params flag file.")}(),null);process.exitCode=t}if(Ne.isPersistentWorker(process.argv)){const t=new f,e=new Map;Ne.enterWorkerLoop((async r=>{if(void 0===r.inputs)throw new Error("No inputs specified in `WorkRequest`.");return console.error=(...t)=>{r.output.write(`${t.join(" ")}\n`)},await ke(r.arguments,{fileCache:t,programCache:e,req:r})}))}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
